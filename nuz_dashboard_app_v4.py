# –ó–∞–ø—É—Å–∫: streamlit run nuz_dashboard_app_v10_final_simplified_v6.py
from __future__ import annotations

import re
from enum import Enum
from io import BytesIO
from pathlib import Path
from typing import Dict, List, Tuple

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.colors import qualitative as qcolors
import streamlit as st

# A) –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
APP_VERSION = "v24.56-heatmap-fix"
# –†–µ–∂–∏–º: —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª –∏–∑ —Ñ–∞–π–ª–∞, –±–µ–∑ —Ñ–æ—Ä–º—É–ª/–¥–æ—Å—á—ë—Ç–æ–≤
SIMPLE_MODE = True

# A) –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–æ–¥–∞
YEAR_RE = re.compile(r"(?<!\d)(20\d{2})(?!\d)")

def guess_year_from_filename(name: str) -> int | None:
    s = str(name).lower().replace("–≥.", " ").replace("–≥", " ")
    m = YEAR_RE.search(s)
    return int(m.group(1)) if m else None

# ------------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã -------------------------
st.set_page_config(page_title=f"–ù–Æ–ó ‚Äî –î–∞—à–±–æ—Ä–¥ {APP_VERSION}", layout="wide", page_icon="üìä")
st.markdown("""
<style>
:root { --text-base: 15px; }
html, body, [class*="css"]  { font-size: var(--text-base); }
section[data-testid="stSidebar"] { min-width: 330px !important; }
h1, h2, h3 { font-weight: 700; }
h2 { margin-top: .6rem; }
.block-container { padding-top: 1rem; padding-bottom: 3rem; }
[data-testid="stMetricValue"] { font-weight: 800; }
[data-testid="stMetricDelta"] { font-size: 0.95rem; }
.dataframe th, .dataframe td { padding: 6px 10px !important; }
[data-testid="stTable"] td, [data-testid="stTable"] th { padding: 8px 10px !important; }
code, .number-cell { font-variant-numeric: tabular-nums; }
.gtitle, .xtitle, .ytitle { font-weight: 700 !important; }
.badge { display:inline-block; padding:2px 8px; border-radius:10px; background:#EEF5FF; color:#1d4ed8; font-size:12px; margin-left:6px; }
.small { color:#6b7280; font-size:12px; }
</style>
""", unsafe_allow_html=True)

# ------------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–ª–æ–≤–∞—Ä–∏ ---------------------------
class Metrics(str, Enum):
    REVENUE = "–í—ã—Ä—É—á–∫–∞ –æ—Ç —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏ –ù–Æ–ó (—Ä—É–±)"
    LOAN_ISSUE = "–í—ã–¥–∞–Ω–æ –∑–∞–π–º–æ–≤ –ù–Æ–ó (—Ä—É–±)"
    BELOW_LOAN = "–¢–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω–Ω—ã–π –Ω–∏–∂–µ —Å—É–º–º—ã –∑–∞–π–º–∞ –ù–Æ–ó (—Ä—É–±)"
    LOAN_VALUE_OF_SOLD = "–°—Å—É–¥–∞ –≤—ã—à–µ–¥—à–∏—Ö –∏–∑–¥–µ–ª–∏–π –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω –ù–Æ–ó (—Ä—É–±)"
    AUCTIONED_ITEMS_COUNT = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—à–µ–¥—à–∏—Ö –∏–∑–¥–µ–ª–∏–π –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω –ù–Æ–ó"
    PENALTIES_RECEIVED = "–ü–æ–ª—É—á–µ–Ω–æ % –∏ –ø–µ–Ω–∏ –ù–Æ–ó (—Ä—É–±)"
    MARKUP_AMOUNT = "–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞—Ü–µ–Ω–∫–∏ –æ—Ç —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏ –ù–Æ–ó (—Ä—É–±)"
    PENALTIES_PLUS_MARKUP = "–ü–æ–ª—É—á–µ–Ω–æ % –∏ –ø–µ–Ω–∏ + –Ω–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂—É –ù–Æ–ó (—Ä—É–±)"
    LOAN_ISSUE_UNITS = "–í—ã–¥–∞–Ω–æ –∑–∞–π–º–æ–≤ –ù–Æ–ó (—à—Ç)"
    BELOW_LOAN_UNITS = "–¢–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω–Ω—ã–π –Ω–∏–∂–µ —Å—É–º–º—ã –∑–∞–π–º–∞ –ù–Æ–ó (—à—Ç)"
    DEBT = "–°—Å—É–¥–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å (—Ä—É–±)"
    DEBT_UNITS = "–°—Å—É–¥–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –±–µ–∑ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏ –ù–Æ–ó (—à—Ç)"
    DEBT_NO_SALE = "–°—Å—É–¥–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –±–µ–∑ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏ –ù–Æ–ó (—Ä—É–±)"
    MARKUP_PCT = "–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –ù–Æ–ó"
    AVG_LOAN = "–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–π–º–∞ –ù–Æ–ó (—Ä—É–±)"
    AVG_LOAN_TERM = "–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –∑–∞–π–º–∞ –ù–Æ–ó (–¥–Ω–µ–π)"
    ILLIQUID_BY_COUNT_PCT = "–î–æ–ª—è –Ω–µ–ª–∏–∫–≤–∏–¥–∞ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (%)"
    ILLIQUID_BY_VALUE_PCT = "–î–æ–ª—è –Ω–µ–ª–∏–∫–≤–∏–¥–∞ –æ—Ç –æ—Ü–µ–Ω–∫–∏ (%)"
    YIELD = "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
    ISSUE_SHARE = "–î–æ–ª—è –ù–Æ–ó –ø–æ –≤—ã–¥–∞—á–µ"
    DEBT_SHARE = "–î–æ–ª—è –ù–Æ–ó –ø–æ —Å—Å—É–¥–Ω–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏"
    RISK_SHARE = "–î–æ–ª—è –Ω–∏–∂–µ –∑–∞–π–º–∞, %"
    CALC_MARKUP_PCT = "–†–∞—Å—á–µ—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥, %"

    # –ü–ª–∞–Ω—ã (–ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    PLAN_ISSUE_PCT = "% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–π–º–æ–≤ –ù–Æ–ó"
    PLAN_PENALTIES_PCT = "% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º % –∏ –ø–µ–Ω—è–º –ù–Æ–ó"
    PLAN_REVENUE_PCT = "% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ –æ—Ç —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏ –ù–Æ–ó"

    # –ö–ª–∏–µ–Ω—Ç—ã / —Ñ–∏–ª–∏–∞–ª—ã
    UNIQUE_CLIENTS = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
    NEW_UNIQUE_CLIENTS = "–ù–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
    BRANCH_COUNT = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–º–±–∞—Ä–¥–æ–≤"
    BRANCH_NEW_COUNT = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ª–æ–º–±–∞—Ä–¥–æ–≤"
    BRANCH_CLOSED_COUNT = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ª–æ–º–±–∞—Ä–¥–æ–≤"

    # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ
    REDEEMED_ITEMS_COUNT = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∑–∞–ª–æ–≥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ –ù–Æ–ó (—à—Ç)"
    LOAN_REPAYMENT_SUM = "–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è —Å—É–º–º—ã –∑–∞–π–º–∞ –ù–Æ–ó (—Ä—É–±)"
    LOSS_BELOW_LOAN = "–£–±—ã—Ç–æ–∫ –æ—Ç —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ —Å—É–º–º—ã –∑–∞–π–º–∞ –ù–Æ–ó (—Ä—É–±)"

    # –î–æ–ª–∏
    INTEREST_SHARE = "–î–æ–ª—è –ù–Æ–ó –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º % –∏ –ø–µ–Ω–∏"

    # –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    REDEEMED_SUM = "–°—É–º–º–∞ –≤—ã–∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ –ù–Æ–ó (—Ä—É–±)"
    REDEEMED_SHARE_PCT = "–î–æ–ª—è –≤—ã–∫—É–ø–æ–≤ –∑–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ –ù–Æ–ó (%)"

# ‚ö™Ô∏è –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: –±–µ—Ä—ë–º –∏–∑ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –º–µ—Ç—Ä–∏–∫–∏)
ACCEPTED_METRICS_CANONICAL = {
    Metrics.DEBT_NO_SALE.value,
    Metrics.LOAN_ISSUE.value,
    Metrics.PLAN_ISSUE_PCT.value,
    Metrics.LOAN_ISSUE_UNITS.value,
    Metrics.PENALTIES_RECEIVED.value,
    Metrics.PLAN_PENALTIES_PCT.value,
    Metrics.REVENUE.value,
    Metrics.PLAN_REVENUE_PCT.value,
    Metrics.MARKUP_AMOUNT.value,
    Metrics.PENALTIES_PLUS_MARKUP.value,
    Metrics.BRANCH_COUNT.value,
    Metrics.BRANCH_NEW_COUNT.value,
    Metrics.BRANCH_CLOSED_COUNT.value,
    Metrics.LOAN_VALUE_OF_SOLD.value,
    Metrics.AUCTIONED_ITEMS_COUNT.value,
    Metrics.DEBT_SHARE.value,
    Metrics.ISSUE_SHARE.value,
    Metrics.INTEREST_SHARE.value,
    Metrics.AVG_LOAN.value,
    Metrics.MARKUP_PCT.value,
    Metrics.REDEEMED_SUM.value,
    Metrics.REDEEMED_ITEMS_COUNT.value,
    Metrics.REDEEMED_SHARE_PCT.value,
    Metrics.AVG_LOAN_TERM.value,
    Metrics.LOAN_REPAYMENT_SUM.value,
    Metrics.BELOW_LOAN_UNITS.value,
    Metrics.BELOW_LOAN.value,
    Metrics.LOSS_BELOW_LOAN.value,
    Metrics.DEBT_UNITS.value,
    Metrics.ILLIQUID_BY_COUNT_PCT.value,
    Metrics.ILLIQUID_BY_VALUE_PCT.value,
    Metrics.YIELD.value,
}
ACCEPTED_METRICS_CANONICAL |= {Metrics.DEBT.value}


ORDER = ["–Ø–Ω–≤–∞—Ä—å","–§–µ–≤—Ä–∞–ª—å","–ú–∞—Ä—Ç","–ê–ø—Ä–µ–ª—å","–ú–∞–π","–ò—é–Ω—å","–ò—é–ª—å","–ê–≤–≥—É—Å—Ç","–°–µ–Ω—Ç—è–±—Ä—å","–û–∫—Ç—è–±—Ä—å","–ù–æ—è–±—Ä—å","–î–µ–∫–∞–±—Ä—å"]
ORDER_WITH_TOTAL = ORDER + ["–ò—Ç–æ–≥–æ"]

NUZ_ACTIVITY_METRICS = {
    Metrics.DEBT_NO_SALE.value,
    Metrics.LOAN_ISSUE.value,
    Metrics.LOAN_ISSUE_UNITS.value,
    Metrics.PENALTIES_RECEIVED.value,
    Metrics.REVENUE.value,
    Metrics.MARKUP_AMOUNT.value,
    Metrics.PENALTIES_PLUS_MARKUP.value,
    Metrics.LOAN_VALUE_OF_SOLD.value,
    Metrics.AUCTIONED_ITEMS_COUNT.value,
    Metrics.AVG_LOAN.value,
    Metrics.MARKUP_PCT.value,
    Metrics.REDEEMED_SUM.value,
    Metrics.REDEEMED_ITEMS_COUNT.value,
    Metrics.AVG_LOAN_TERM.value,
    Metrics.LOAN_REPAYMENT_SUM.value,
    Metrics.BELOW_LOAN_UNITS.value,
    Metrics.BELOW_LOAN.value,
    Metrics.LOSS_BELOW_LOAN.value,
    Metrics.DEBT_UNITS.value,
    Metrics.ILLIQUID_BY_COUNT_PCT.value,
    Metrics.ILLIQUID_BY_VALUE_PCT.value,
    Metrics.YIELD.value,
    Metrics.ISSUE_SHARE.value,
    Metrics.DEBT_SHARE.value,
    Metrics.INTEREST_SHARE.value,
    Metrics.PLAN_ISSUE_PCT.value,
    Metrics.PLAN_PENALTIES_PCT.value,
    Metrics.PLAN_REVENUE_PCT.value,
}

def _month_sort_key(m: str) -> int:
    return ORDER.index(m) if m in ORDER else len(ORDER) + 1

@st.cache_data
def get_monthly_totals_from_file(df_raw: pd.DataFrame, regions: Tuple[str, ...], metric: str) -> pd.DataFrame:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–º–µ—Å—è—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫ ¬´–ò—Ç–æ–≥–æ¬ª –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É."""
    base = df_raw[
        df_raw["–†–µ–≥–∏–æ–Ω"].isin(regions) &
        (df_raw["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"] == metric) &
        (df_raw["–ú–µ—Å—è—Ü"].astype(str) != "–ò—Ç–æ–≥–æ") &
        df_raw["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].str.contains(r"^\s*–∏—Ç–æ–≥–æ\b", case=False, na=False)
    ].copy()
    if base.empty:
        return pd.DataFrame()

    prio = pd.Series(
        np.where(base.get("–ò—Å—Ç–æ—á–Ω–∏–∫–§–∞–π–ª–∞", pd.Series(index=base.index, dtype=object)).eq("TOTALS_FILE"), 1, 2),
        index=base.index
    )
    base["__prio__"] = prio

    base.sort_values(["–†–µ–≥–∏–æ–Ω", "–ú–µ—Å—è—Ü", "__prio__"], inplace=True)
    best = (base.groupby(["–†–µ–≥–∏–æ–Ω", "–ú–µ—Å—è—Ü"], observed=True)
                 .first().reset_index()[["–†–µ–≥–∏–æ–Ω", "–ú–µ—Å—è—Ü", "–ó–Ω–∞—á–µ–Ω–∏–µ"]])
    return best

def month_series_from_file(df_all, regions, metric, months):
    dfm = get_monthly_totals_from_file(df_all, tuple(regions), metric)
    if dfm.empty:
        return pd.Series(dtype=float)
    s = (dfm[dfm["–ú–µ—Å—è—Ü"].astype(str).isin(months)]
            .groupby("–ú–µ—Å—è—Ü", observed=True)["–ó–Ω–∞—á–µ–Ω–∏–µ"].sum())
    # —Å—Ç—Ä–æ–≥–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
    s = s.reindex([m for m in months if m in s.index])
    return s

@st.cache_data
def sorted_months_safe(_values) -> list[str]:
    """–ë–µ–∑ –∫–µ—à–∞: –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞—à–µ–º—É ORDER."""
    if _values is None:
        return []
    s = pd.Series(_values)
    if pd.api.types.is_categorical_dtype(s):
        s = s.astype(str)
    seq = [str(x) for x in s.dropna().astype(str)]
    seq = [m for m in seq if m in ORDER]
    seq = list(dict.fromkeys(seq))
    return sorted(seq, key=_month_sort_key)

# --- –ê–≥—Ä–µ–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏–∑ —Å—Ç—Ä–æ–∫ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª
# SUM: –ø–æ—Ç–æ–∫–æ–≤—ã–µ —Å—É–º–º—ã –∑–∞ –º–µ—Å—è—Ü (—Ä—É–±/—à—Ç) ‚Äî —Å–∫–ª–∞–¥—ã–≤–∞–µ–º.
AGG_SUM = {
    Metrics.REVENUE.value, Metrics.LOAN_ISSUE.value, Metrics.PENALTIES_RECEIVED.value,
    Metrics.MARKUP_AMOUNT.value, Metrics.PENALTIES_PLUS_MARKUP.value,
    Metrics.LOAN_ISSUE_UNITS.value, Metrics.BELOW_LOAN.value, Metrics.BELOW_LOAN_UNITS.value,
    Metrics.LOAN_VALUE_OF_SOLD.value, Metrics.AUCTIONED_ITEMS_COUNT.value,
    Metrics.REDEEMED_ITEMS_COUNT.value, Metrics.REDEEMED_SUM.value,
    Metrics.LOAN_REPAYMENT_SUM.value, Metrics.LOSS_BELOW_LOAN.value,
    Metrics.BRANCH_NEW_COUNT.value, Metrics.BRANCH_CLOSED_COUNT.value,
    Metrics.UNIQUE_CLIENTS.value, Metrics.NEW_UNIQUE_CLIENTS.value,
}

# MEAN: –ø—Ä–æ—Ü–µ–Ω—Ç—ã/–¥–æ–ª–∏ –∏ —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ‚Äî —É—Å—Ä–µ–¥–Ω—è–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º.
AGG_MEAN = {
    Metrics.MARKUP_PCT.value, Metrics.YIELD.value,
    Metrics.ILLIQUID_BY_COUNT_PCT.value, Metrics.ILLIQUID_BY_VALUE_PCT.value,
    Metrics.ISSUE_SHARE.value, Metrics.DEBT_SHARE.value, Metrics.INTEREST_SHARE.value,
    Metrics.PLAN_ISSUE_PCT.value, Metrics.PLAN_PENALTIES_PCT.value, Metrics.PLAN_REVENUE_PCT.value,
    Metrics.AVG_LOAN.value,      # –µ—Å–ª–∏ –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ –∫–∞–∫ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª
    Metrics.AVG_LOAN_TERM.value, # ‚¨ÖÔ∏è –í–ê–ñ–ù–û: —Å—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –º–µ—Å—è—Ü–∞–º
    Metrics.REDEEMED_SHARE_PCT.value,
}

# LAST (—Å–Ω–∏–º–æ–∫ –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞) ‚Äî –±–µ—Ä—ë–º –ü–û–°–õ–ï–î–ù–ò–ô –º–µ—Å—è—Ü –ø–µ—Ä–∏–æ–¥–∞.
AGG_LAST = {
    Metrics.DEBT.value, Metrics.DEBT_NO_SALE.value, Metrics.DEBT_UNITS.value,
    Metrics.BRANCH_COUNT.value,  # ¬´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–º–±–∞—Ä–¥–æ–≤¬ª ‚Äî —Å–Ω–∏–º–æ–∫
}

# (–æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
METRICS_SUM  = AGG_SUM.copy()
METRICS_MEAN = AGG_MEAN.copy()
METRICS_LAST = AGG_LAST.copy()

def aggregation_rule(metric: str) -> str:
    if metric in AGG_SUM:  return "sum"
    if metric in AGG_MEAN: return "mean"
    if metric in AGG_LAST: return "last"
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø—Ä–æ—Ü–µ–Ω—Ç—ã ‚Äî mean, –¥–µ–Ω—å–≥–∏/—à—Ç ‚Äî sum
    return "mean" if is_percent_metric(metric) else "sum"

def period_value_from_itogo(df_all: pd.DataFrame, regions: list[str], metric: str, months: list[str]) -> float | None:
    s = month_series_from_file(df_all, regions, metric, months)
    if s.empty:
        return None
    rule = aggregation_rule(metric)
    vals = pd.to_numeric(s, errors="coerce")
    if rule == "sum":
        return float(vals.sum())
    if rule == "mean":
        return float(vals.mean())
    if rule == "last":
        # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
        last_months = sorted_months_safe(vals.dropna().index)
        if not last_months: return None
        v = vals.get(last_months[-1], np.nan)
        return float(v) if pd.notna(v) else None
    return None

def period_value_from_itogo_for_region(df_all: pd.DataFrame, region: str, metric: str,
                                       months: list[str], *, snapshots_mode: str = "last") -> float | None:
    # –ë–µ—Ä—ë–º —Ä–æ–≤–Ω–æ —Å—Ç—Ä–æ–∫–∏ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
    dfm = get_monthly_totals_from_file(df_all, (region,), metric)
    if dfm.empty:
        return None
    part = dfm[dfm["–ú–µ—Å—è—Ü"].astype(str).isin(months)]
    if part.empty:
        return None

    vals = pd.to_numeric(part["–ó–Ω–∞—á–µ–Ω–∏–µ"], errors="coerce").dropna()
    if vals.empty:
        return None

    rule = aggregation_rule(metric)

    if rule == "sum":
        return float(vals.sum())
    if rule == "mean":
        return float(vals.mean())

    # rule == "last" ‚Üí —Å–Ω–∏–º–æ–∫: —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–≤–æ–¥–∫–∏ –±–µ—Ä—ë–º —Å—Ä–µ–¥–Ω–µ–µ, –µ—Å–ª–∏ —Ç–∞–∫ –ø–æ–ø—Ä–æ—Å–∏–ª–∏
    if rule == "last":
        if snapshots_mode == "mean":
            return float(vals.mean())
        else:
            # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
            part = part.copy()
            part["–ú–µ—Å—è—Ü"] = pd.Categorical(part["–ú–µ—Å—è—Ü"].astype(str), categories=ORDER, ordered=True)
            part = part.sort_values("–ú–µ—Å—è—Ü")
            return float(pd.to_numeric(part["–ó–Ω–∞—á–µ–Ω–∏–µ"], errors="coerce").iloc[-1])

    # –¥–µ—Ñ–æ–ª—Ç
    return float(vals.mean())


def period_values_by_region_from_itogo(df_all, regions, metric, months) -> dict[str, float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {–†–µ–≥–∏–æ–Ω: –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥} —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å—Ç—Ä–æ–∫ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª.
    –°—É–º–º–∞/—Å—Ä–µ–¥–Ω–µ–µ/–ø–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî –∫–∞–∫ –∑–∞–¥–∞–Ω–æ aggregation_rule(metric).
    """
    dfm = get_monthly_totals_from_file(df_all, tuple(regions), metric)
    if dfm.empty:
        return {}

    dfm = dfm[dfm["–ú–µ—Å—è—Ü"].astype(str).isin(months)].copy()
    if dfm.empty:
        return {}

    rule = aggregation_rule(metric)
    out = {}
    for reg, t in dfm.groupby("–†–µ–≥–∏–æ–Ω"):
        # Ensure months are sorted before taking the last value for 'last' rule
        t = t.copy()
        t['–ú–µ—Å—è—Ü'] = pd.Categorical(t['–ú–µ—Å—è—Ü'], categories=ORDER, ordered=True)
        t = t.sort_values("–ú–µ—Å—è—Ü")
        vals = pd.to_numeric(t["–ó–Ω–∞—á–µ–Ω–∏–µ"], errors="coerce").dropna()
        if vals.empty:
            continue

        if rule == "sum":
            out[str(reg)] = float(vals.sum())
        elif rule == "mean":
            out[str(reg)] = float(vals.mean())
        elif rule == "last":
            out[str(reg)] = float(vals.iloc[-1])
        else:
            out[str(reg)] = float(vals.mean())  # –¥–µ—Ñ–æ–ª—Ç
    return out


METRICS_BIGGER_IS_BETTER = {
    Metrics.REVENUE.value, Metrics.LOAN_ISSUE.value, Metrics.MARKUP_PCT.value,
    Metrics.YIELD.value, Metrics.PENALTIES_RECEIVED.value, Metrics.MARKUP_AMOUNT.value,
    Metrics.PENALTIES_PLUS_MARKUP.value, Metrics.AVG_LOAN_TERM.value
}
METRICS_SMALLER_IS_BETTER = {
    Metrics.BELOW_LOAN.value, Metrics.RISK_SHARE.value,
    Metrics.ILLIQUID_BY_COUNT_PCT.value, Metrics.ILLIQUID_BY_VALUE_PCT.value
}

METRIC_HELP: Dict[str, str] = {
    Metrics.MARKUP_PCT.value: "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Ü–µ–Ω–æ—á–Ω—É—é (—Å—Å—É–¥–Ω—É—é) —Å—Ç–æ–∏–º–æ—Å—Ç—å. –í—ã—Å–æ–∫–∏–π % –Ω–∞—Ü–µ–Ω–∫–∏ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–ª–æ–≥–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è –ø—Ä–æ–¥–∞—é—Ç—Å—è —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –¥–æ—Ä–æ–∂–µ —Å—É–º–º—ã –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∏–º –∑–∞–π–º–æ–≤, —á—Ç–æ —Ö–æ—Ä–æ—à–æ –¥–ª—è –ø—Ä–∏–±—ã–ª–∏.",
    Metrics.RISK_SHARE.value: "–†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –æ–±–æ—Ä–æ—Ç: –¥–æ–ª—è –≤—ã—Ä—É—á–∫–∏ –æ—Ç –ø—Ä–æ–¥–∞–∂, –ø—Ä–∏—à–µ–¥—à–∞—è—Å—è –Ω–∞ –ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–æ–¥–∞–Ω—ã –¥–µ—à–µ–≤–ª–µ —Å—É–º–º—ã –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –ø–æ –Ω–∏–º –∑–∞–π–º–∞. –ß–µ–º –≤—ã—à–µ —ç—Ç–æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å, —Ç–µ–º –±–æ–ª—å—à–µ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ–Ω–µ—Å–ª–∞ —É–±—ã—Ç–æ–∫ –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ª–æ–≥–∞. –†–æ—Å—Ç –¥–æ–ª–∏ –Ω–∏–∂–µ –∑–∞–π–º–∞ ‚Äì —Ç—Ä–µ–≤–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª.",
    Metrics.YIELD.value: "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–¥–∞—á: –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ –ø–µ–Ω–µ–π –∫ —Å—É–º–º–µ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–π–º–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥. –ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è, —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –¥–æ—Ö–æ–¥ —Å –∫–∞–∂–¥–æ–≥–æ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ —Ä—É–±–ª—è. –ù–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç —Å—Ä–æ–∫ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞–π–º–æ–≤.",
    Metrics.AVG_LOAN_TERM.value: "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∫–ª–∏–µ–Ω—Ç—ã –±—Ä–∞–ª–∏ –∑–∞–π–º—ã. –î–ª–∏–Ω–Ω—ã–π —Å—Ä–æ–∫ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –¥–æ—Ö–æ–¥—ã, –Ω–æ –∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥. –ö–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –ª–∏–±–æ –æ –±—ã—Å—Ç—Ä–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ, –ª–∏–±–æ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∑–∞–π–º–∞ –≤ —Å—Ç–∞–¥–∏—é –ø—Ä–æ–¥–∞–∂–∏.",
    Metrics.ILLIQUID_BY_COUNT_PCT.value: "–ß–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤ (–∑–∞–ª–æ–≥–æ–≤), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–∑–Ω–∞–µ—Ç—Å—è –Ω–µ–ª–∏–∫–≤–∏–¥–Ω–æ–π (—Ç—Ä—É–¥–Ω–æ—Ä–µ–∞–ª–∏–∑—É–µ–º–æ–π) –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É. –í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∑–∞–ª–æ–≥–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π –¥–æ–ª–≥–æ –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è, –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞—è –∫–∞–ø–∏—Ç–∞–ª –∫–æ–º–ø–∞–Ω–∏–∏.",
    Metrics.ILLIQUID_BY_VALUE_PCT.value: "–ß–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤ (–∑–∞–ª–æ–≥–æ–≤), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–∑–Ω–∞–µ—Ç—Å—è –Ω–µ–ª–∏–∫–≤–∏–¥–Ω–æ–π (—Ç—Ä—É–¥–Ω–æ—Ä–µ–∞–ª–∏–∑—É–µ–º–æ–π) –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–æ–ª–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä–µ–º.",
    Metrics.REVENUE.value: "–î–µ–Ω—å–≥–∏, —Å—É–º–º–∏—Ä—É–µ–º –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º –∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏.",
    Metrics.LOAN_ISSUE.value: "–î–µ–Ω—å–≥–∏, —Å—É–º–º–∏—Ä—É–µ–º.",
    Metrics.BELOW_LOAN.value: "–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–æ–≤, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∏–∂–µ —Å—É–º–º—ã –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –ø–æ –Ω–∏–º –∑–∞–π–º–∞.",
    Metrics.DEBT.value: "–°–Ω–∏–º–æ–∫ –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞. –í KPI/—Å–≤–æ–¥–∫–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –º–µ—Å—è—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–∫–Ω—É.",
    Metrics.AVG_LOAN.value: "**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç '–ò—Ç–æ–≥–æ':** –µ—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –±–µ—Ä—É—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ—ë. –ò–Ω–∞—á–µ ‚Äî –≤–∑–≤–µ—à–µ–Ω–Ω–æ: Œ£(–í—ã–¥–∞–Ω–æ, —Ä—É–±)/Œ£(–í—ã–¥–∞–Ω–æ, —à—Ç).",
    Metrics.MARKUP_AMOUNT.value: "–°—É–º–º–∞. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî —Å—Ç—Ä–æ–∫–æ–≤–æ–µ ¬´–ò—Ç–æ–≥–æ –ø–æ —Ä–µ–≥–∏–æ–Ω—É¬ª, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.",
    Metrics.DEBT_NO_SALE.value: "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –±–µ–∑ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ (—Å–Ω–∏–º–æ–∫). –í –ø–µ—Ä–∏–æ–¥–µ —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ/–ø–æ—Å–ª–µ–¥–Ω–∏–π, –∞ –Ω–µ —Å—É–º–º—É."
}
METRIC_HELP.update({
    Metrics.PLAN_ISSUE_PCT.value: "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–ª–∞–Ω –ø–æ —Å—É–º–º–µ –≤—ã–¥–∞—á. –ë–µ—Ä—ë–º –≥–æ—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞; –∞–≥—Ä–µ–≥–∞—Ü–∏—è ‚Äî —Å—Ä–µ–¥–Ω–µ–µ.",
    Metrics.PLAN_PENALTIES_PCT.value: "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º –∏ –ø–µ–Ω—è–º. –ë–µ—Ä—ë–º –∏–∑ —Ñ–∞–π–ª–∞; –∞–≥—Ä–µ–≥–∞—Ü–∏—è ‚Äî —Å—Ä–µ–¥–Ω–µ–µ.",
    Metrics.PLAN_REVENUE_PCT.value: "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏. –ë–µ—Ä—ë–º –∏–∑ —Ñ–∞–π–ª–∞; –∞–≥—Ä–µ–≥–∞—Ü–∏—è ‚Äî —Å—Ä–µ–¥–Ω–µ–µ.",
    Metrics.UNIQUE_CLIENTS.value: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –º–µ—Å—è—Ü–µ. –í –ø–µ—Ä–∏–æ–¥–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è (–±–µ–∑ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏).",
    Metrics.NEW_UNIQUE_CLIENTS.value: "–ù–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞ –º–µ—Å—è—Ü. –í –ø–µ—Ä–∏–æ–¥–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è.",
    Metrics.BRANCH_COUNT.value: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–º–±–∞—Ä–¥–æ–≤ –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ (—Å–Ω–∏–º–æ–∫). –í –ø–µ—Ä–∏–æ–¥–µ ‚Äî —Å—Ä–µ–¥–Ω–µ–µ/–ø–æ—Å–ª–µ–¥–Ω–∏–π.",
    Metrics.BRANCH_NEW_COUNT.value: "–û—Ç–∫—Ä—ã—Ç–æ –Ω–æ–≤—ã—Ö –ª–æ–º–±–∞—Ä–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü (—Å–Ω–∏–º–æ–∫/—Å—É–º–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞).",
    Metrics.BRANCH_CLOSED_COUNT.value: "–ó–∞–∫—Ä—ã—Ç–æ –ª–æ–º–±–∞—Ä–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü.",
    Metrics.REDEEMED_ITEMS_COUNT.value: "–í—ã–∫—É–ø–ª–µ–Ω–Ω—ã–µ –∑–∞–ª–æ–≥–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ (—à—Ç). –°—É–º–º–∏—Ä—É–µ—Ç—Å—è.",
    Metrics.LOAN_REPAYMENT_SUM.value: "–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É–º–º—ã –∑–∞–π–º–∞ (—Ä—É–±). –°—É–º–º–∏—Ä—É–µ—Ç—Å—è.",
    Metrics.LOSS_BELOW_LOAN.value: "–£–±—ã—Ç–æ–∫ –æ—Ç –ø—Ä–æ–¥–∞–∂ –Ω–∏–∂–µ —Å—É–º–º—ã –∑–∞–π–º–∞ (—Ä—É–±). –°—É–º–º–∏—Ä—É–µ—Ç—Å—è.",
    Metrics.INTEREST_SHARE.value: "–î–æ–ª—è –ù–Æ–ó –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º % –∏ –ø–µ–Ω–∏. –ë–µ—Ä—ë–º –∏–∑ —Ñ–∞–π–ª–∞; –∞–≥—Ä–µ–≥–∞—Ü–∏—è ‚Äî —Å—Ä–µ–¥–Ω–µ–µ.",
})

PERCENT_METRICS = {
    Metrics.MARKUP_PCT.value,
    Metrics.ILLIQUID_BY_COUNT_PCT.value,
    Metrics.ILLIQUID_BY_VALUE_PCT.value,
    Metrics.YIELD.value,
    Metrics.RISK_SHARE.value,
    Metrics.ISSUE_SHARE.value,
    Metrics.DEBT_SHARE.value,
    Metrics.REDEEMED_SHARE_PCT.value,
}
PERCENT_METRICS |= {
    Metrics.PLAN_ISSUE_PCT.value,
    Metrics.PLAN_PENALTIES_PCT.value,
    Metrics.PLAN_REVENUE_PCT.value,
    Metrics.INTEREST_SHARE.value,
}

def is_percent_metric(name: str) -> bool:
    if not name:
        return False
    s = str(name)
    low = s.lower()
    return (
        s in PERCENT_METRICS
        or "–¥–æ–ª—è" in low
        or ("–Ω–∞—Ü–µ–Ω–∫" in low and s in {Metrics.MARKUP_PCT.value, Metrics.CALC_MARKUP_PCT.value})
    )

def agg_of_metric(metric: str) -> str:
    return "sum" if metric in METRICS_SUM else ("last" if metric in METRICS_LAST else "mean")

def format_rub(x: float | None) -> str:
    if x is None or pd.isna(x):
        return "‚Äî"
    return f"{x:,.0f} ‚ÇΩ".replace(",", " ")

def fmt_pct(v: float | None, digits: int = 2) -> str:
    if v is None or pd.isna(v):
        return "‚Äî"
    return f"{v:.{digits}f}%"

def fmt_days(v: float | None, digits: int = 2) -> str:
    if v is None or pd.isna(v):
        return "‚Äî"
    return f"{v:.{digits}f} –¥–Ω."

def y_fmt_for_metric(m: str) -> tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (plotly tickformat, suffix_for_hover)"""
    if ("—Ä—É–±" in m) or (m == Metrics.DEBT.value):
        return ",.0f", " ‚ÇΩ"
    if m == Metrics.DEBT_UNITS.value:
        return ",.0f", " —à—Ç"
    if is_percent_metric(m):
        return ".2f", "%"
    if "–¥–Ω–µ–π" in m:
        return ".2f", " –¥–Ω."
    return ",.2f", ""

def _flatten_columns(df: pd.DataFrame) -> pd.DataFrame:
    if isinstance(df.columns, pd.CategoricalIndex):
        df.columns = df.columns.astype(str)
    df.columns.name = None
    return df

def detect_category(raw_text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–∞: –ù–Æ–ó / –Æ–ó / –û–±—â–µ–µ (–±–µ–∑ —è–≤–Ω–æ–π –º–µ—Ç–∫–∏)."""
    s = (raw_text or "").lower()
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –ù–Æ–ó / –Æ–ó (—É—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã)
    has_nuz = re.search(r"\b–Ω\s*—é\s*–∑\b|–Ω—é–∑", s) is not None
    has_yuz = re.search(r"\b—é\s*–∑\b|—é–∑", s) is not None
    if has_nuz and not has_yuz:
        return "–ù–Æ–ó"
    if has_yuz and not has_nuz:
        return "–Æ–ó"
    return "–û–±—â–µ–µ"

def normalize_metric_name(name: str) -> str:
    if name is None: return ""
    s = str(name).strip()
    t = re.sub(r"[^\w–∞-—è—ë]+", " ", s.lower(), flags=re.IGNORECASE).strip()

    # --- –ø–ª–∞–Ω—ã (% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è) ---
    if ("–≤—ã–ø–æ–ª–Ω" in t and "–ø–ª–∞–Ω" in t and "–≤—ã–¥–∞–Ω" in t and "–∑–∞–π–º" in t):
        return Metrics.PLAN_ISSUE_PCT.value
    if ("–≤—ã–ø–æ–ª–Ω" in t and "–ø–ª–∞–Ω" in t and ("–ø–µ–Ω–∏" in t or "–ø—Ä–æ—Ü–µ–Ω—Ç" in t or "–ø—Ä–æ—Ü" in t) and "–ø–æ–ª—É—á" in t):
        return Metrics.PLAN_PENALTIES_PCT.value
    if ("–≤—ã–ø–æ–ª–Ω" in t and "–ø–ª–∞–Ω" in t and "–≤—ã—Ä—É—á–∫" in t and ("—Ä–∞—Å–ø—Ä–æ–¥" in t or "–Ω—é–∑" in t)):
        return Metrics.PLAN_REVENUE_PCT.value

    # –ë—ã—Å—Ç—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã:
    is_nuz = ("–Ω—é–∑" in t)
    is_yuz = (re.search(r"\b—é–∑\b", t) is not None)

    # üîÅ –°–ò–ù–û–ù–ò–ú–´ –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞ ‚Üí –∫–∞–Ω–æ–Ω
    if is_nuz and ("–≤—ã–∫—É–ø" in t) and ("–∫–æ–ª–∏—á" in t) and ("–∑–∞ –ø–µ—Ä–∏–æ–¥" in t):
        return Metrics.REDEEMED_ITEMS_COUNT.value
    if is_nuz and (("—Å—É–º–º" in t) and ("–≤—ã–∫—É–ø" in t) and ("–∑–∞ –ø–µ—Ä–∏–æ–¥" in t)):
        return Metrics.REDEEMED_SUM.value
    if is_nuz and ("–¥–æ–ª—è" in t) and ("–≤—ã–∫—É–ø" in t) and ("–∑–∞ –ø–µ—Ä–∏–æ–¥" in t):
        return Metrics.REDEEMED_SHARE_PCT.value
    if is_nuz and ("—Å—Ä–µ–¥–Ω" in t) and ("—Å—Å—É–¥" in t) and ("–∑–∞–¥–æ–ª–∂" in t):
        return Metrics.DEBT_NO_SALE.value

    # --- —Ç–æ–ª—å–∫–æ –ù–Æ–ó ‚Äî –¥–µ–Ω—å–≥–∏/—à—Ç ---
    if is_nuz and "—Å—Å—É–¥" in t and "–∑–∞–¥–æ–ª–∂" in t and "–±–µ–∑" in t and ("—Ä–∞—Å–ø—Ä–æ–¥" in t or "–Ω—é–∑" in t) and "—à—Ç" not in t:
        return Metrics.DEBT_NO_SALE.value
    if is_nuz and "—Å—Å—É–¥" in t and "–∑–∞–¥–æ–ª–∂" in t and "—à—Ç" in t:
        return Metrics.DEBT_UNITS.value
    if is_nuz and "—Å—Å—É–¥" in t and "–∑–∞–¥–æ–ª–∂" in t:
        return Metrics.DEBT.value

    if is_nuz and "–≤—ã—Ä—É—á" in t and ("—Ä–∞—Å–ø—Ä–æ–¥" in t or "–ø—Ä–æ–¥–∞–∂" in t):
        return Metrics.REVENUE.value

    if is_nuz and "–≤—ã–¥–∞–Ω" in t and "–∑–∞–π–º" in t and ("—à—Ç" in t or "—à—Ç—É–∫" in t):
        return Metrics.LOAN_ISSUE_UNITS.value
    if is_nuz and "–≤—ã–¥–∞–Ω" in t and "–∑–∞–π–º" in t:
        return Metrics.LOAN_ISSUE.value

    if is_nuz and "–ø–æ–ª—É—á–µ–Ω–æ" in t and ("–ø–µ–Ω–∏" in t or "–ø—Ä–æ—Ü" in t):
        return Metrics.PENALTIES_RECEIVED.value
    if is_nuz and "–ø–æ–ª—É—á–µ–Ω–æ" in t and ("–Ω–∞—Ü–µ–Ω–∫" in t or "–æ—Ü–µ–Ω–∫" in t) and ("—Ä–∞—Å–ø—Ä–æ–¥" in t or "–ø—Ä–æ–¥–∞–∂" in t):
        return Metrics.MARKUP_AMOUNT.value
    if is_nuz and ("–ø–æ–ª—É—á–µ–Ω–æ" in t and "–ø–µ–Ω–∏" in t and ("–Ω–∞—Ü–µ–Ω–∫" in t or "–æ—Ü–µ–Ω–∫" in t)):
        return Metrics.PENALTIES_PLUS_MARKUP.value

    if is_nuz and "–Ω–∞—Ü–µ–Ω–∫" in t:
        return Metrics.MARKUP_PCT.value

    if is_nuz and "—Å—Å—É–¥–∞" in t and "–≤—ã—à–µ–¥—à–∏—Ö" in t and "–∞—É–∫—Ü–∏–æ–Ω" in t:
        return Metrics.LOAN_VALUE_OF_SOLD.value
    if is_nuz and "–∫–æ–ª–∏—á" in t and "–≤—ã—à–µ–¥—à–∏—Ö" in t:
        return Metrics.AUCTIONED_ITEMS_COUNT.value

    # –ö–ª–∏–µ–Ω—Ç—ã/—Ñ–∏–ª–∏–∞–ª—ã ‚Äî –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ù–Æ–ó (–∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞—Ö)
    if "–∫–æ–ª–∏—á" in t and "–ª–æ–º–±–∞—Ä–¥" in t and "–Ω–æ–≤" in t:
        return Metrics.BRANCH_NEW_COUNT.value
    if "–∫–æ–ª–∏—á" in t and "–ª–æ–º–±–∞—Ä–¥" in t and "–∑–∞–∫—Ä—ã—Ç" in t:
        return Metrics.BRANCH_CLOSED_COUNT.value
    if "–∫–æ–ª–∏—á" in t and "–ª–æ–º–±–∞—Ä–¥" in t:
        return Metrics.BRANCH_COUNT.value

    # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ù–Æ–ó ‚Äî –≤—ã–∫—É–ø—ã/–ø–æ–≥–∞—à–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–≤–æ–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏):
    if is_nuz and ("–ø–æ–≥–∞—à" in t) and ("—Å—É–º–º" in t) and ("–∑–∞–π–º" in t):
        return Metrics.LOAN_REPAYMENT_SUM.value
    if is_nuz and ("–∫–æ–ª–∏—á" in t and "–≤—ã–∫—É–ø" in t):
        return Metrics.REDEEMED_ITEMS_COUNT.value

    # –†–∏—Å–∫–æ–≤—ã–µ/derived:
    if is_nuz and "–Ω–∏–∂–µ" in t and "–∑–∞–π–º" in t and ("—à—Ç" in t or "—à—Ç—É–∫" in t):
        return Metrics.BELOW_LOAN_UNITS.value
    if is_nuz and "–Ω–∏–∂–µ" in t and "–∑–∞–π–º" in t:
        return Metrics.BELOW_LOAN.value
    if is_nuz and "—É–±—ã—Ç–æ–∫" in t and "–Ω–∏–∂–µ" in t and "–∑–∞–π–º" in t:
        return Metrics.LOSS_BELOW_LOAN.value

    # –°—Ä–µ–¥–Ω–∏–µ:
    if is_nuz and (("—Å—Ä–µ–¥–Ω" in t and "—Å—É–º–º" in t and "–∑–∞–π–º" in t) or ("avg" in t and "loan" in t)):
        return Metrics.AVG_LOAN.value
    if is_nuz and "—Å—Ä–µ–¥–Ω" in t and "—Å—Ä–æ–∫" in t and ("–ø–µ—Ä –∏–æ–¥" in t or "–ø–µ—Ä–∏–æ–¥" in t or "–∑–∞ –ø–µ—Ä" in t) and "–∑–∞–π–º" in t:
        return Metrics.AVG_LOAN_TERM.value

    # –î–æ–ª–∏ –ù–Æ–ó:
    if is_nuz and "–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç" in t:
        return Metrics.YIELD.value
    if is_nuz and "–¥–æ–ª—è" in t and "–≤—ã–¥–∞—á" in t:
        return Metrics.ISSUE_SHARE.value
    if is_nuz and "–¥–æ–ª—è" in t and "—Å—Å—É–¥–Ω" in t and "–∑–∞–¥–æ–ª–∂" in t:
        return Metrics.DEBT_SHARE.value
    if is_nuz and "–¥–æ–ª—è" in t and "–Ω—é–∑" in t and ("–ø–µ–Ω–∏" in t or "–ø—Ä–æ—Ü" in t) and ("–ø–æ–ª—É—á" in t):
        return Metrics.INTEREST_SHARE.value

    return s

def normalize_month_token(x) -> str | None:
    RUS_MONTHS = {
        "—è–Ω–≤–∞—Ä—å": "–Ø–Ω–≤–∞—Ä—å", "—è–Ω–≤": "–Ø–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å": "–§–µ–≤—Ä–∞–ª—å", "—Ñ–µ–≤": "–§–µ–≤—Ä–∞–ª—å",
        "–º–∞—Ä—Ç": "–ú–∞—Ä—Ç", "–º–∞—Ä": "–ú–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å": "–ê–ø—Ä–µ–ª—å", "–∞–ø—Ä": "–ê–ø—Ä–µ–ª—å",
        "–º–∞–π": "–ú–∞–π", "–∏—é–Ω—å": "–ò—é–Ω—å", "–∏—é–ª—å": "–ò—é–ª—å", "–∞–≤–≥—É—Å—Ç": "–ê–≤–≥—É—Å—Ç", "–∞–≤–≥": "–ê–≤–≥—É—Å—Ç",
        "—Å–µ–Ω—Ç—è–±—Ä—å": "–°–µ–Ω—Ç—è–±—Ä—å", "—Å–µ–Ω": "–°–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å": "–û–∫—Ç—è–±—Ä—å", "–æ–∫—Ç": "–û–∫—Ç—è–±—Ä—å",
        "–Ω–æ—è–±—Ä—å": "–ù–æ—è–±—Ä—å", "–Ω–æ—è": "–ù–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å": "–î–µ–∫–∞–±—Ä—å", "–¥–µ–∫": "–î–µ–∫–∞–±—Ä—å",
        "–∏—Ç–æ–≥–æ": "–ò—Ç–æ–≥–æ", "–∏—Ç–æ–≥": "–ò—Ç–æ–≥–æ"
    }
    if x is None: return None
    s = str(x).strip().lower().replace(".", "")
    s = re.sub(r"[\d\s–≥–≥–æ–¥]+$", "", s).strip()
    return RUS_MONTHS.get(s)

@st.cache_data
def consistent_color_map(keys: Tuple[str, ...]) -> Dict[str, str]:
    pal = (qcolors.Plotly + qcolors.D3 + qcolors.Set3 + qcolors.Dark24 + qcolors.Light24)
    return {k: pal[i % len(pal)] for i, k in enumerate(sorted(map(str, keys)))}

def detect_month_header(df: pd.DataFrame, max_header_rows: int = 15) -> tuple[int, list[tuple[int, str]]] | None:
    for r in range(min(max_header_rows, len(df))):
        row = df.iloc[r, :].tolist()
        month_cols = [(j, m) for j, val in enumerate(row) if (m := normalize_month_token(val)) in ORDER_WITH_TOTAL]
        if len({m for _, m in month_cols if m in ORDER}) >= 3:
            cleaned = []
            last_m = None
            for j, m in sorted(month_cols, key=lambda x: x[0]):
                if m != last_m:
                    cleaned.append((j, m))
                    last_m = m
            return r, cleaned
    return None

def guess_data_sheet(xl: pd.ExcelFile) -> str:
    if "TDSheet" in xl.sheet_names: return "TDSheet"
    best, best_score = None, -1
    for sh in xl.sheet_names:
        try:
            tmp = xl.parse(sh, header=None, nrows=15)
            det = detect_month_header(tmp)
            sc = len(det[1]) if det else 0
            if sc > best_score: best, best_score = sh, sc
        except Exception:
            continue
    return best or xl.sheet_names[0]

def _canonical_region_from_file(stem: str, df_head: pd.DataFrame) -> str:
    # 1) –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ò—Ç–æ–≥–æ <–†–µ–≥–∏–æ–Ω>" –∏–∑ —Ç–µ–ª–∞ —Ñ–∞–π–ª–∞
    try:
        c0 = df_head.iloc[1, 0]
        if isinstance(c0, str) and c0.strip().lower().startswith("–∏—Ç–æ–≥–æ"):
            reg = re.sub(r"^\s*–∏—Ç–æ–≥–æ\s+", "", c0.strip(), flags=re.IGNORECASE)
            return re.sub(r"\s{2,}", " ", reg).strip(" _-¬∑.")
    except Exception:
        pass

    # 2) –ß–∏—Å—Ç–∏–º –∏–º—è —Ñ–∞–π–ª–∞
    s = stem
    # —É–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
    s = re.sub(r"(?i)\b(–∏—Ç–æ–≥–æ|–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏[—è–µ]|—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω\w*|–¥–∞–Ω–Ω\w*)\b", "", s)
    # —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –≥–æ–¥—ã 20xx
    s = re.sub(r"\b20\d{2}\b", "", s)
    # —É–±–∏—Ä–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –º–µ—Å—è—Ü–µ–≤ –≤–∏–¥–∞ "1-8", "01_08", "1‚Äì8"
    s = re.sub(r"\b\d{1,2}\s*[-‚Äì‚Äî_]\s*\d{1,2}\b", "", s)
    # —É–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ —Ö–≤–æ—Å—Ç—ã
    s = re.sub(r"[ _\-‚Äì‚Äî]*\d+\b", "", s)
    # –ø—Ä–∏–≤–æ–¥–∏–º –ø—Ä–æ–±–µ–ª—ã –∏ –æ–±—Ä–µ–∑–∞–µ–º –º—É—Å–æ—Ä
    s = re.sub(r"\s{2,}", " ", s).strip(" _-¬∑.")
    # –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    if re.match(r"(?i)^(–∫–∫|–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä)", s): s = "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π"
    if re.fullmatch(r"(?i)—Å–∞–Ω–∫—Ç(?:-|\s*)–ø–µ—Ç–µ—Ä–±—É—Ä–≥|—Å–∞–Ω–∫—Ç", s): s = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    return s or stem

@st.cache_data(show_spinner="–ß–∏—Ç–∞—é –∏ —Ä–∞–∑–±–∏—Ä–∞—é —Ñ–∞–π–ª—ã‚Ä¶")
def parse_excel(file_bytes: bytes, region_name: str, file_year: int | None = None) -> pd.DataFrame:
    def coerce_number(x) -> float:
        if x is None or (isinstance(x, float) and np.isnan(x)): return np.nan
        s = str(x).strip()
        if s in {"", "-", "‚Äî", "NA", "NaN", "nan"}: return np.nan
        if s.endswith("%"):
            try:
                s = s[:-1].strip().replace("\u00A0","").replace(" ","").replace(",", ".")
                return float(s)
            except (ValueError, TypeError):
                return np.nan
        s = s.replace("\u00A0","").replace(" ","")
        if s.count(",") == 1 and s.count(".") > 1: s = s.replace(".", "").replace(",", ".")
        elif s.count(",") > 1 and s.count(".") <= 1: s = s.replace(",", "")
        elif s.count(",") == 1 and s.count(".") == 0: s = s.replace(",", ".")
        try: return float(s)
        except (ValueError, TypeError): return np.nan

    xl = pd.ExcelFile(BytesIO(file_bytes))
    sheet = guess_data_sheet(xl)
    df = xl.parse(sheet, header=None)

    head = df.head(5)
    canonical_region = _canonical_region_from_file(Path(region_name).stem, head)
    first_c0 = next((str(x).strip() for x in df.iloc[:,0].dropna().tolist() if str(x).strip()), "")
    is_totals_file = bool(re.match(r"(?i)^\s*–∏—Ç–æ–≥–æ\b", first_c0))

    det = detect_month_header(df)
    if not det:
        raise ValueError(f"–ù–µ –Ω–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –ª–∏—Å—Ç–µ '{sheet}'.")
    header_row, month_cols = det
    month_map = {j: m for j, m in sorted(month_cols, key=lambda x: x[0])}
    month_indices = list(month_map.keys())
    first_month_col = min(month_indices)

    rows = []
    current_branch = ""
    last_cat = "–û–±—â–µ–µ"
    for r in range(header_row + 1, len(df)):
        cell0 = df.iat[r, 0] if df.shape[1] > 0 else None
        if isinstance(cell0, str) and cell0.strip():
            current_branch = cell0.strip()

        metric_cell = None
        for c in range(first_month_col - 1, -1, -1):
            val = df.iat[r, c]
            if isinstance(val, str) and val.strip():
                metric_cell = val.strip()
                break
        if not metric_cell:
            continue

        metric_name = normalize_metric_name(metric_cell)

        # ‚õîÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∞ –Ω–µ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if metric_name not in ACCEPTED_METRICS_CANONICAL:
            continue

        # –ù–û–í–û–ï: —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ª–µ–≤—ã—Ö —è—á–µ–µ–∫ —Å—Ç—Ä–æ–∫–∏ (–≤—Å–µ –¥–æ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ –º–µ—Å—è—Ü–µ–≤)
        left_cells = []
        for c in range(0, first_month_col):
            val = df.iat[r, c]
            if isinstance(val, str) and val.strip():
                left_cells.append(val.strip())
        left_blob = " ".join(left_cells).lower()

        # –ë–∞–∑–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ—Ç—Ä–∏–∫–∏
        cat = detect_category(metric_cell)

        # –ï—Å–ª–∏ –º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∞–º–æ–π –º–µ—Ç—Ä–∏–∫–µ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–æ–∫–∏
        if cat == "–û–±—â–µ–µ":
            # 1) –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            cat = detect_category(current_branch)
            # 2) —Ç–µ–∫—Å—Ç –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏
            if cat == "–û–±—â–µ–µ":
                if re.search(r"\b–Ω\s*—é\s*–∑\b|–Ω—é–∑", left_blob):
                    cat = "–ù–Æ–ó"
                elif re.search(r"\b—é\s*–∑\b|—é–∑", left_blob):
                    cat = "–Æ–ó"
                else:
                    cat = last_cat  # 3) –Ω–∞—Å–ª–µ–¥—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —è–≤–Ω—É—é –º–µ—Ç–∫—É –≤ –±–ª–æ–∫–µ

        # –û–±–Ω–æ–≤–ª—è–µ–º ¬´–ª–∏–ø–∫—É—é¬ª –º–µ—Ç–∫—É, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —è–≤–Ω—É—é
        if cat in {"–ù–Æ–ó", "–Æ–ó"}:
            last_cat = cat

        code_match = re.search(r"‚Ññ\s*(\d+)", str(current_branch))
        code = code_match.group(1) if code_match else ""

        vals = [coerce_number(df.iat[r, j]) for j in month_indices]
        arr = np.array(vals, dtype=float)
        mask_fact = (~np.isnan(arr)) & (np.abs(arr) > 1e-12)
        if not mask_fact.any():
            continue

        first, last = int(np.where(mask_fact)[0][0]), int(np.where(mask_fact)[0][-1])
        for pos, j in enumerate(month_indices):
            v = vals[pos]
            if np.isnan(v) or ((pos < first or pos > last) and (abs(v) <= 1e-12)):
                continue
            rows.append({
                "–†–µ–≥–∏–æ–Ω": str(canonical_region),
                "–ò—Å—Ç–æ—á–Ω–∏–∫–§–∞–π–ª–∞": "TOTALS_FILE" if is_totals_file else "BRANCHES_FILE",
                "–ö–æ–¥": code,
                "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ": str(current_branch),
                "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": metric_name,
                "–ú–µ—Å—è—Ü": month_map[j],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": float(v),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat,
            })

    out = pd.DataFrame(rows)
    if out.empty:
        raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã.")

    out["–ì–æ–¥"] = int(file_year) if file_year else pd.NA
    out["–ú–µ—Å—è—Ü"] = pd.Categorical(out["–ú–µ—Å—è—Ü"].astype(str), categories=ORDER_WITH_TOTAL, ordered=True)
    for c in ["–†–µ–≥–∏–æ–Ω", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ö–æ–¥", "–ò—Å—Ç–æ—á–Ω–∏–∫–§–∞–π–ª–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]:
        out[c] = out[c].astype("string")
    return out

def apply_economic_derivatives(df: pd.DataFrame) -> pd.DataFrame:
    # –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ —Å–æ–∑–¥–∞–µ–º derived –º–µ—Ç—Ä–∏–∫–∏
    if SIMPLE_MODE:
        return df

    out = df.copy()
    def div(a,b,scale=1.0):
        return (pd.to_numeric(out.get(a), errors="coerce") /
                pd.to_numeric(out.get(b), errors="coerce").replace(0, np.nan)) * scale

    if Metrics.AVG_LOAN.value not in out and {Metrics.LOAN_ISSUE.value, Metrics.LOAN_ISSUE_UNITS.value} <= set(out.columns):
        out[Metrics.AVG_LOAN.value] = div(Metrics.LOAN_ISSUE.value, Metrics.LOAN_ISSUE_UNITS.value)

    if Metrics.MARKUP_PCT.value not in out and {Metrics.MARKUP_AMOUNT.value, Metrics.REVENUE.value} <= set(out.columns):
        out[Metrics.MARKUP_PCT.value] = div(Metrics.MARKUP_AMOUNT.value, Metrics.REVENUE.value, 100.0)

    if Metrics.RISK_SHARE.value not in out and {Metrics.BELOW_LOAN.value, Metrics.REVENUE.value} <= set(out.columns):
        out[Metrics.RISK_SHARE.value] = div(Metrics.BELOW_LOAN.value, Metrics.REVENUE.value, 100.0)

    if Metrics.YIELD.value not in out and {Metrics.PENALTIES_RECEIVED.value, Metrics.LOAN_ISSUE.value} <= set(out.columns):
        out[Metrics.YIELD.value] = div(Metrics.PENALTIES_RECEIVED.value, Metrics.LOAN_ISSUE.value, 100.0)

    return out

def normalize_percent_series(s: pd.Series) -> pd.Series:
    x = pd.to_numeric(s, errors="coerce")
    clean = x.dropna()
    if not clean.empty and (clean.abs() <= 2).all(): x = x * 100.0
    return x

def strip_totals_rows(df: pd.DataFrame) -> pd.DataFrame:
    mask = ~df["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].str.contains(r"^\s*–∏—Ç–æ–≥–æ\b", case=False, na=False)
    return df.loc[mask]

@st.cache_data
def get_aggregated_data(df_raw: pd.DataFrame, regions: Tuple[str, ...], months: Tuple[str, ...]) -> pd.DataFrame:
    df = strip_totals_rows(df_raw)
    sub = df[df["–†–µ–≥–∏–æ–Ω"].isin(regions) & df["–ú–µ—Å—è—Ü"].isin(months)]
    if sub.empty: return pd.DataFrame()
    all_entities_df = (sub[["–†–µ–≥–∏–æ–Ω", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"]].drop_duplicates().sort_values(by=["–†–µ–≥–∏–æ–Ω", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"]).set_index(["–†–µ–≥–∏–æ–Ω", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"]))

    # --- —Å—É–º–º—ã ---
    df_sum = (sub[sub["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].isin(METRICS_SUM)]
              .groupby(["–†–µ–≥–∏–æ–Ω","–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ","–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"], observed=True)["–ó–Ω–∞—á–µ–Ω–∏–µ"]
              .sum().unstack())
    df_sum = _flatten_columns(df_sum)
    result = all_entities_df.join(df_sum, how="left")

    # --- last (—Å–Ω–∏–º–∫–∏ –Ω–∞ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞) ---
    if METRICS_LAST:
        snap = sub[sub["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].isin(METRICS_LAST)].copy()
        if not snap.empty:
            # –í–∞–∂–Ω–æ: '–ú–µ—Å—è—Ü' ‚Äî —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ
            snap['–ú–µ—Å—è—Ü'] = pd.Categorical(snap['–ú–µ—Å—è—Ü'].astype(str), categories=ORDER, ordered=True)
            snap = snap.sort_values(["–†–µ–≥–∏–æ–Ω","–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ","–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å","–ú–µ—Å—è—Ü"])
            df_last = (snap.groupby(["–†–µ–≥–∏–æ–Ω","–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ","–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"], observed=True)
                            .tail(1)
                            .set_index(["–†–µ–≥–∏–æ–Ω","–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ","–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"])["–ó–Ω–∞—á–µ–Ω–∏–µ"]
                            .unstack())
            df_last = _flatten_columns(df_last)
            result = result.join(df_last, how="left")

    # --- —Å—Ä–µ–¥–Ω–∏–µ ---
    metrics_to_average = METRICS_MEAN - ({Metrics.RISK_SHARE.value} if not SIMPLE_MODE else set())

    if metrics_to_average:
        df_mean = (sub[sub["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].isin(metrics_to_average)]
                   .groupby(["–†–µ–≥–∏–æ–Ω","–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ","–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"], observed=True)["–ó–Ω–∞—á–µ–Ω–∏–µ"]
                   .mean().unstack())
        df_mean = _flatten_columns(df_mean)
        for metric in metrics_to_average:
            if metric in df_mean.columns:
                result[metric] = df_mean[metric]

    result = apply_economic_derivatives(result) # –ù–µ –±—É–¥–µ—Ç –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –≤ SIMPLE_MODE

    return result.reset_index()


@st.cache_data
def get_monthly_pivoted_data(df_raw: pd.DataFrame, regions: Tuple[str, ...], months: Tuple[str, ...], raw_only: bool = False) -> pd.DataFrame:
    df = strip_totals_rows(df_raw)
    sub = df[df["–†–µ–≥–∏–æ–Ω"].isin(regions) & df["–ú–µ—Å—è—Ü"].isin(months)]
    if sub.empty: return pd.DataFrame()
    pivot = sub.pivot_table(index=["–†–µ–≥–∏–æ–Ω","–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ","–ú–µ—Å—è—Ü"], columns="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", values="–ó–Ω–∞—á–µ–Ω–∏–µ", aggfunc="sum")
    pivot = _flatten_columns(pivot).reset_index()

    if not raw_only:
        pivot = apply_economic_derivatives(pivot)

    for col in [Metrics.ILLIQUID_BY_COUNT_PCT.value, Metrics.ILLIQUID_BY_VALUE_PCT.value, Metrics.YIELD.value, Metrics.MARKUP_PCT.value]:
        if col in pivot.columns: pivot[col] = normalize_percent_series(pivot[col])
    return pivot

@st.cache_data
def month_totals_matrix(df_raw: pd.DataFrame, regions: Tuple[str, ...], metric: str) -> pd.DataFrame:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –†–µ–≥–∏–æ–Ω √ó –ú–µ—Å—è—Ü —Å –ø–æ–º–µ—Å—è—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ —Å—Ç—Ä–æ–∫ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª.
    –ù–∏–∫–∞–∫–∏—Ö —Å—É–º–º –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º ‚Äî —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –ª–µ–∂–∏—Ç –≤ —Ñ–∞–π–ª–µ –≤ —Å—Ç—Ä–æ–∫–∞—Ö ¬´–ò—Ç–æ–≥–æ¬ª.
    """
    dfm = get_monthly_totals_from_file(df_raw, regions, metric)
    if dfm.empty:
        return pd.DataFrame(columns=["–†–µ–≥–∏–æ–Ω","–ú–µ—Å—è—Ü","–ó–Ω–∞—á–µ–Ω–∏–µ"])
    return dfm.copy()

def _postprocess_monthly_df(df: pd.DataFrame) -> pd.DataFrame:
    if df is None or df.empty:
        return pd.DataFrame(columns=["–†–µ–≥–∏–æ–Ω","–ú–µ—Å—è—Ü","–ó–Ω–∞—á–µ–Ω–∏–µ"])
    out = df.copy()
    keep = [c for c in out.columns if c in {"–†–µ–≥–∏–æ–Ω","–ú–µ—Å—è—Ü","–ó–Ω–∞—á–µ–Ω–∏–µ"}]
    out = out[keep]
    out["–†–µ–≥–∏–æ–Ω"] = out["–†–µ–≥–∏–æ–Ω"].astype("string")
    out["–ú–µ—Å—è—Ü"] = out["–ú–µ—Å—è—Ü"].astype(str)
    out = out[out["–ú–µ—Å—è—Ü"].isin(ORDER)]
    out = (out.groupby(["–†–µ–≥–∏–æ–Ω","–ú–µ—Å—è—Ü"], as_index=False)["–ó–Ω–∞—á–µ–Ω–∏–µ"].sum())
    return out

@st.cache_data
def aggregate_for_dynamics_cached(df_raw: pd.DataFrame, regions: Tuple[str, ...], months: Tuple[str, ...], metric: str) -> pd.DataFrame:
    # –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ "–ò—Ç–æ–≥–æ"
    from_file = get_monthly_totals_from_file(df_raw, regions, metric)
    if not from_file.empty:
        out = from_file[from_file["–ú–µ—Å—è—Ü"].astype(str).isin(months)]
        if not out.empty:
            return _postprocess_monthly_df(out.rename(columns={"–ó–Ω–∞—á–µ–Ω–∏–µ": "–ó–Ω–∞—á–µ–Ω–∏–µ"}))
    return pd.DataFrame(columns=["–†–µ–≥–∏–æ–Ω","–ú–µ—Å—è—Ü","–ó–Ω–∞—á–µ–Ω–∏–µ"])


def number_column_config(title: str, money=False, percent=False, days=False):
    if money: return st.column_config.NumberColumn(f"{title}, ‚ÇΩ", help="–î–µ–Ω–µ–∂–Ω–∞—è —Å—É–º–º–∞", format="%.0f")
    if percent: return st.column_config.NumberColumn(f"{title}, %", help="–ü—Ä–æ—Ü–µ–Ω—Ç—ã/–¥–æ–ª–∏", format="%.2f%%")
    if days: return st.column_config.NumberColumn(f"{title}, –¥–Ω.", help="–î–Ω–∏", format="%.2f")
    return st.column_config.NumberColumn(title, format="%.2f")

def default_column_config(df: pd.DataFrame) -> dict:
    cfg = {}
    for c in df.columns:
        s = str(c)
        is_money = "—Ä—É–±" in s
        is_percent = s.endswith("(%)") or "–Ω–∞—Ü–µ–Ω–∫" in s.lower() or "–¥–æ–ª—è" in s.lower() or s == Metrics.YIELD.value
        is_days = "–¥–Ω–µ–π" in s
        if pd.api.types.is_numeric_dtype(df[c]):
            cfg[s] = number_column_config(s, money=is_money, percent=is_percent, days=is_days)
    return cfg

def kpi_block(df_all: pd.DataFrame, regions: list[str], months_range: list[str], all_available_months: list[str], strict_mode: bool):
    st.markdown("## üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (KPI) <span class='badge'>–ö–∞–∫ –≤ —Ñ–∞–π–ª–µ</span>", unsafe_allow_html=True)
    st.caption("–ü–µ—Ä–∏–æ–¥ —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å—Ç—Ä–æ–∫ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª: —Å—É–º–º—ã ‚Äî —Å—É–º–º–∏—Ä—É–µ–º, –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ —Å—Ä–µ–¥–Ω–∏–µ ‚Äî —É—Å—Ä–µ–¥–Ω—è–µ–º, —Å–Ω–∏–º–∫–∏ ‚Äî –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.")

    def _render_metric_if_value(col, title, value, *, kind="money", delta=None, delta_color="normal"):
        if value is None or pd.isna(value) or (isinstance(value, (int,float)) and abs(value) < 1e-12):
            return  # –Ω–µ —Ä–∏—Å—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        if kind == "money":
            txt = format_rub(value)
        elif kind == "pct":
            txt = fmt_pct(value)
        elif kind == "days":
            txt = fmt_days(value)
        else:
            txt = f"{value:,.0f}".replace(",", " ")
        col.metric(title, txt, delta=delta, delta_color=delta_color)

    sub_df = df_all[(df_all["–†–µ–≥–∏–æ–Ω"].isin(regions)) & (df_all["–ú–µ—Å—è—Ü"].astype(str).isin(months_range))]
    
    # –∫–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ KPI-—Ç–∞–±–ª–∏—Ü–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    KPI_SET_MONEY = [Metrics.REVENUE.value, Metrics.LOAN_ISSUE.value]
    KPI_SET_RATE  = [Metrics.MARKUP_PCT.value, Metrics.YIELD.value]
    KPI_COLUMNS   = KPI_SET_MONEY + KPI_SET_RATE  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å

    mode_view = st.radio("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ", ["–ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º", "–°–æ–≤–æ–∫—É–ø–Ω–æ (–ø–æ –≤—ã–±–æ—Ä–∫–µ)"], horizontal=True)

    if mode_view == "–ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º":
        regs_sorted = sorted(map(str, sub_df["–†–µ–≥–∏–æ–Ω"].unique()))
        rows = []
        for reg in regs_sorted:
            r = {"–†–µ–≥–∏–æ–Ω": reg}
            for m in KPI_COLUMNS:
                # –¥–ª—è KPI –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –¥–ª—è —Å–Ω–∏–º–∫–æ–≤ –±–µ—Ä—ë–º —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
                r[m] = period_value_from_itogo_for_region(df_all, reg, m, months_range, snapshots_mode="mean")
            rows.append(r)

        kpi_table = pd.DataFrame(rows).set_index("–†–µ–≥–∏–æ–Ω")
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ
        sort_col = Metrics.REVENUE.value if Metrics.REVENUE.value in kpi_table.columns else kpi_table.columns[0]
        kpi_table = kpi_table.sort_values(by=sort_col, ascending=False)

        # –∫–æ–Ω—Ñ–∏–≥ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ (‚ÇΩ/%, –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è –¥–µ–Ω–µ–≥)
        cfg = {}
        for c in kpi_table.columns:
            if "—Ä—É–±" in c:
                cfg[c] = st.column_config.NumberColumn(f"{c}", format="%.0f")
            elif is_percent_metric(c):
                cfg[c] = st.column_config.NumberColumn(f"{c}", format="%.2f%%")
            elif "–¥–Ω–µ–π" in c:
                cfg[c] = st.column_config.NumberColumn(f"{c}", format="%.2f")
            else:
                cfg[c] = st.column_config.NumberColumn(f"{c}", format="%.0f")

        st.dataframe(kpi_table, use_container_width=True, column_config=cfg)
        st.caption("–ü–µ—Ä–∏–æ–¥: —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è %-–º–µ—Ç—Ä–∏–∫ –∏ –º–µ—Ç—Ä–∏–∫-—Å–Ω–∏–º–∫–æ–≤; –¥–µ–Ω–µ–∂–Ω—ã–µ/—à—Ç ‚Äî —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –∑–∞ –ø–µ—Ä–∏–æ–¥.")
        return  # –≤—ã—Ö–æ–¥–∏–º, –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∏–∂–µ –Ω–µ —Ä–∏—Å—É–µ–º –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ

    if sub_df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
        return

    def pv(metric):
        return period_value_from_itogo(df_all, regions, metric, months_range)

    lbl_cur = f"{months_range[0]}‚Äì{months_range[-1]}" if len(months_range) > 1 else months_range[0]

    v_rev = pv(Metrics.REVENUE.value)
    v_issue = pv(Metrics.LOAN_ISSUE.value)
    v_markup_pct = pv(Metrics.MARKUP_PCT.value)
    v_yield = pv(Metrics.YIELD.value)
    v_avg_term = pv(Metrics.AVG_LOAN_TERM.value)
    v_avg_loan = pv(Metrics.AVG_LOAN.value)
    v_branches = pv(Metrics.BRANCH_COUNT.value)
    v_redeemed = pv(Metrics.REDEEMED_ITEMS_COUNT.value)

    cA, cB, cC, cD = st.columns(4)
    _render_metric_if_value(cA, f"–í—ã—Ä—É—á–∫–∞ ({lbl_cur})", v_rev, kind="money")
    _render_metric_if_value(cB, f"–í—ã–¥–∞–Ω–æ –∑–∞–π–º–æ–≤ ({lbl_cur})", v_issue, kind="money")
    _render_metric_if_value(cC, f"–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ ({lbl_cur})", v_markup_pct, kind="pct")
    _render_metric_if_value(cD, f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ({lbl_cur})", v_yield, kind="pct")

    st.markdown("<br>", unsafe_allow_html=True)
    cE, cF, cG, cH = st.columns(4)
    _render_metric_if_value(cE, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–º–±–∞—Ä–¥–æ–≤ ({lbl_cur})", v_branches, kind="num")

    if len(regions) == 1:
        _render_metric_if_value(cF, f"–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –∑–∞–π–º–∞ ({lbl_cur})", v_avg_term, kind="days")
    else:
        per_reg = period_values_by_region_from_itogo(df_all, regions, Metrics.AVG_LOAN_TERM.value, months_range)
        if per_reg:
            with cF:
                st.markdown("**–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –∑–∞–π–º–∞ (–¥–Ω–µ–π)**")
                st.dataframe(
                    pd.DataFrame(sorted(per_reg.items()), columns=["–†–µ–≥–∏–æ–Ω", "–¥–Ω."]).set_index("–†–µ–≥–∏–æ–Ω"),
                    use_container_width=True,
                    column_config={"–¥–Ω.": st.column_config.NumberColumn("–¥–Ω.", format="%.2f")}
                )

    if len(regions) == 1:
        _render_metric_if_value(cG, f"–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–π–º–∞ ({lbl_cur})", v_avg_loan, kind="money")
    else:
        per_reg_avg_loan = period_values_by_region_from_itogo(df_all, regions, Metrics.AVG_LOAN.value, months_range)
        if per_reg_avg_loan:
            with cG:
                st.markdown("**–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–π–º–∞ (—Ä—É–±)**")
                st.dataframe(
                    pd.DataFrame(sorted(per_reg_avg_loan.items()), columns=["–†–µ–≥–∏–æ–Ω", "‚ÇΩ"]).set_index("–†–µ–≥–∏–æ–Ω"),
                    use_container_width=True,
                    column_config={"‚ÇΩ": st.column_config.NumberColumn("‚ÇΩ", format="%.0f")}
                )

    _render_metric_if_value(cH, f"–í—ã–∫—É–ø–ª–µ–Ω–Ω—ã–µ –∑–∞–ª–æ–≥–∏ ({lbl_cur})", v_redeemed, kind="num")

    with st.expander("üßÆ –ö–∞–∫ –ø–æ—Å—á–∏—Ç–∞–Ω–æ (–ø—Ä–∞–≤–∏–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏)"):
        raw_metric_names = set(sub_df["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique())
        rows = []
        for m in sorted(raw_metric_names):
            rows.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": m, "–ü—Ä–∞–≤–∏–ª–æ": aggregation_rule(m)})
        if rows:
            st.dataframe(pd.DataFrame(rows), use_container_width=True)
        else:
            st.info("–ù–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.")

def summary_block(agg_data, df_all, regions, months_range, all_available_months, strict_mode):
    st.subheader("üìã –°–≤–æ–¥–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥")
    st.caption("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Ä–æ–≤–Ω–æ –∏–∑ —Å—Ç—Ä–æ–∫ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö. –ù–∏–∫–∞–∫–∏—Ö —Ñ–æ—Ä–º—É–ª.")

    sub = df_all[df_all["–†–µ–≥–∏–æ–Ω"].isin(regions)]
    raw_metrics = sorted(sub["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique())

    # —Å–æ–±–µ—Ä—ë–º —Ç–∞–±–ª–∏—Ü—É: —Å—Ç—Ä–æ–∫–∏ ‚Äî —Ä–µ–≥–∏–æ–Ω—ã; —Å—Ç–æ–ª–±—Ü—ã ‚Äî –º–µ—Ç—Ä–∏–∫–∏
    rows = []
    for reg in sorted(map(str, sub["–†–µ–≥–∏–æ–Ω"].unique())):
        row = {"–†–µ–≥–∏–æ–Ω": reg}
        for m in raw_metrics:
            row[m] = period_value_from_itogo_for_region(df_all, reg, m, months_range, snapshots_mode="mean")
        rows.append(row)

    if not rows:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º.")
        return

    region_summary = pd.DataFrame(rows).set_index("–†–µ–≥–∏–æ–Ω")

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if Metrics.REVENUE.value in region_summary.columns:
        region_summary = region_summary.sort_values(by=Metrics.REVENUE.value, ascending=False)

    st.dataframe(
        region_summary,
        width="stretch",
        column_config=default_column_config(region_summary)
    )

def nuz_active_branches(df_all: pd.DataFrame,
                        regions: list[str] | Tuple[str, ...],
                        months: list[str]) -> pd.DataFrame:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –†–µ–≥–∏–æ–Ω/–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–æ–≤,
    –≥–¥–µ –µ—Å—Ç—å –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ù–Æ–ó-–º–µ—Ç—Ä–∏–∫–∞–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–∫–Ω–µ."""
    sub = strip_totals_rows(df_all)
    sub = sub[(sub["–†–µ–≥–∏–æ–Ω"].isin(regions)) & (sub["–ú–µ—Å—è—Ü"].astype(str).isin(months))]
    if sub.empty:
        return pd.DataFrame(columns=["–†–µ–≥–∏–æ–Ω","–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"])
    nuz = sub[sub["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].isin(NUZ_ACTIVITY_METRICS)].copy()
    nuz["–ó–Ω–∞—á–µ–Ω–∏–µ"] = pd.to_numeric(nuz["–ó–Ω–∞—á–µ–Ω–∏–µ"], errors="coerce").fillna(0).abs()
    act = (nuz.groupby(["–†–µ–≥–∏–æ–Ω","–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"], observed=True)["–ó–Ω–∞—á–µ–Ω–∏–µ"]
              .sum().reset_index())
    return act[act["–ó–Ω–∞—á–µ–Ω–∏–µ"] > 0][["–†–µ–≥–∏–æ–Ω","–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"]]

def leaderboard_block(df_all: pd.DataFrame, regions: list[str], available_months: list[str]):
    st.subheader("üèÜ –õ–∏–¥–µ—Ä—ã –∏ –∞—É—Ç—Å–∞–π–¥–µ—Ä—ã")
    st.caption("–†–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ –∏–∑ —Ñ–∞–π–ª–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥.")

    if df_all.empty or not available_months:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    only_nuz = st.checkbox(
        "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –ù–Æ–ó", value=True,
        help="–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∏–ª–∏–∞–ª—ã, –≥–¥–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –µ—Å—Ç—å –≤—ã–¥–∞—á–∏/–≤—ã—Ä—É—á–∫–∞/—à—Ç –ø–æ –ù–Æ–ó"
    )

    last_quarter = available_months[max(0, len(available_months)-3):]
    start_m, end_m = st.select_slider("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞:", options=available_months, value=(last_quarter[0], last_quarter[-1]))
    leaderboard_months = ORDER[ORDER.index(start_m): ORDER.index(end_m) + 1]

    agg_data = get_aggregated_data(df_all, tuple(regions), tuple(leaderboard_months))
    if agg_data.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    if only_nuz:
        activity_cols = [Metrics.REVENUE.value, Metrics.LOAN_ISSUE.value, Metrics.LOAN_ISSUE_UNITS.value]
        have = [c for c in activity_cols if c in agg_data.columns and c in df_all["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].unique()]
        if have:
            mask = (agg_data[have].fillna(0).sum(axis=1) > 0)
            agg_data = agg_data[mask]
    if agg_data.empty:
        st.warning("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.")
        return

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—É–ª –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –º–µ—Ç—Ä–∏–∫ —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ—Ö, —á—Ç–æ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
    raw_metric_names = set(df_all["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique())
    numeric_cols = [c for c in agg_data.columns if pd.api.types.is_numeric_dtype(agg_data[c]) and c != "–ö–æ–¥"]
    metric_options = sorted([c for c in numeric_cols if c in raw_metric_names])

    if not metric_options:
        st.warning("–í –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
        return

    chosen_metric = st.selectbox(
        "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å",
        options=metric_options,
        index=metric_options.index(Metrics.REVENUE.value) if Metrics.REVENUE.value in metric_options else 0
    )
    st.caption(METRIC_HELP.get(chosen_metric, ""))

    # –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø—Ä–∞–≤–∏–ª–æ ¬´—á–µ–º –±–æ–ª—å—à–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ¬ª
    if chosen_metric in METRICS_BIGGER_IS_BETTER:
        ascending = False
        title_best, title_worst = "‚úÖ –¢–æ–ø-5 –ª—É—á—à–∏—Ö", "‚ùå –¢–æ–ø-5 —Ö—É–¥—à–∏—Ö"
    elif chosen_metric in METRICS_SMALLER_IS_BETTER:
        ascending = True
        title_best, title_worst = "‚úÖ –¢–æ–ø-5 –ª—É—á—à–∏—Ö (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)", "‚ùå –¢–æ–ø-5 —Ö—É–¥—à–∏—Ö (–±–æ–ª—å—à–µ = —Ö—É–∂–µ)"
    else:
        ascending = False
        title_best, title_worst = "üîù –¢–æ–ø-5 –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π", "üîö –¢–æ–ø-5 –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π"

    sorted_data = agg_data.dropna(subset=[chosen_metric]).sort_values(by=chosen_metric, ascending=ascending)

    c1, c2 = st.columns(2)
    with c1:
        st.markdown(f"**{title_best} –ø–æ _{chosen_metric}_**")
        st.dataframe(sorted_data.head(5)[["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ","–†–µ–≥–∏–æ–Ω",chosen_metric]], width="stretch", column_config=default_column_config(sorted_data))
    with c2:
        st.markdown(f"**{title_worst} –ø–æ _{chosen_metric}_**")
        worst5 = sorted_data.tail(5)
        worst5 = worst5.iloc[::-1].copy()
        st.dataframe(worst5[["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ","–†–µ–≥–∏–æ–Ω",chosen_metric]], width="stretch", column_config=default_column_config(sorted_data))


def comparison_block(df_all: pd.DataFrame, regions: list[str], available_months: list[str]):
    st.subheader("‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤")
    st.caption("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º –∏–∑ —Ñ–∞–π–ª–∞ –∑–∞ –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞.")
    if df_all.empty or not available_months: st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."); return
    c1, c2 = st.columns(2)
    with c1: start_a, end_a = st.select_slider("–ü–µ—Ä–∏–æ–¥ A (–±–∞–∑–æ–≤—ã–π):", options=available_months, value=(available_months[0], available_months[0]))
    with c2: start_b, end_b = st.select_slider("–ü–µ—Ä–∏–æ–¥ B (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã–π):", options=available_months, value=(available_months[-1], available_months[-1]))
    months_a = ORDER[ORDER.index(start_a): ORDER.index(end_a)+1]
    months_b = ORDER[ORDER.index(start_b): ORDER.index(end_b)+1]
    data_a = get_aggregated_data(df_all, tuple(regions), tuple(months_a))
    data_b = get_aggregated_data(df_all, tuple(regions), tuple(months_b))
    if data_a.empty or data_b.empty: st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –æ–±–æ–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."); return
    comparison_df = pd.merge(data_a, data_b, on=["–†–µ–≥–∏–æ–Ω","–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"], how="outer", suffixes=("_A","_B"))

    raw_metric_names = set(df_all["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique())
    all_metrics = sorted([c for c in data_a.columns if pd.api.types.is_numeric_dtype(data_a[c]) and c != "–ö–æ–¥"])
    metric_options = [m for m in all_metrics if m in raw_metric_names]
    if not metric_options:
        st.warning("–ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        return

    chosen_metric = st.selectbox("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", options=metric_options, index=0, help=METRIC_HELP.get(metric_options[0], ""))
    col_a, col_b = f"{chosen_metric}_A", f"{chosen_metric}_B"
    if col_a not in comparison_df.columns: comparison_df[col_a] = np.nan
    if col_b not in comparison_df.columns: comparison_df[col_b] = np.nan
    comparison_df["–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"] = comparison_df[col_b] - comparison_df[col_a]
    comparison_df["–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, %"] = (comparison_df["–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"] / comparison_df[col_a].replace(0, np.nan)) * 100
    is_money, is_percent, is_days = "—Ä—É–±" in chosen_metric, "%" in chosen_metric or "–Ω–∞—Ü–µ–Ω–∫" in chosen_metric.lower() or "–¥–æ–ª—è" in chosen_metric.lower() or chosen_metric == Metrics.YIELD.value, "–¥–Ω–µ–π" in chosen_metric
    cfg = {
        col_a: number_column_config(f"{chosen_metric} (A: {start_a}-{end_a})", money=is_money, percent=is_percent, days=is_days),
        col_b: number_column_config(f"{chosen_metric} (B: {start_b}-{end_b})", money=is_money, percent=is_percent, days=is_days),
        "–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ": number_column_config("–ò–∑–º. (–∞–±—Å.)", money=is_money and not is_percent and not is_days, percent=False, days=False),
        "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, %": st.column_config.NumberColumn("–ò–∑–º. (%)", format="%.1f%%"),
    }
    st.dataframe(comparison_df[["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ","–†–µ–≥–∏–æ–Ω",col_a,col_b,"–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ","–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, %"]].sort_values("–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ", ascending=False).dropna(subset=["–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"]), width="stretch", column_config=cfg)
    st.info("**–ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ:** –ò—â–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω—É–ª—è. –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ñ–∏–ª–∏–∞–ª –ø–æ–∫–∞–∑–∞–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –¥–æ–ª–∏ –Ω–∏–∂–µ –∑–∞–π–º–∞ –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏, —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Ö—É–¥—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–ª–æ–≥–æ–≤ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤).")

def dynamics_block(df_all: pd.DataFrame, regions: list[str], months_range: list[str], color_map: Dict[str, str]):
    st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")

    raw_metric_names = sorted(set(df_all["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique()))
    if not raw_metric_names:
        st.warning("–í —Ñ–∞–π–ª–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏.")
        return

    default_metrics = [m for m in [Metrics.REVENUE.value, Metrics.LOAN_ISSUE.value, Metrics.MARKUP_PCT.value] if m in raw_metric_names]
    metrics = st.multiselect("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏", options=raw_metric_names, default=default_metrics[:3])

    if not metrics:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏.");
        return

    c1, c2, c3 = st.columns(3)
    only_actual, show_trend, fast_plot = c1.checkbox("–¢–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Å—è—Ü—ã", True), c2.checkbox("–õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞", True), c3.checkbox("–û–±–ª–µ–≥—á–∏—Ç—å –æ—Ç—Ä–∏—Å–æ–≤–∫—É", False)

    for met in metrics:
        gp = get_monthly_totals_from_file(df_all, tuple(regions), met)
        gp = gp[gp["–ú–µ—Å—è—Ü"].astype(str).isin(months_range)]
        if gp.empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ ¬´{met}¬ª.");
            continue

        x_domain = months_range if not only_actual else sorted_months_safe(gp["–ú–µ—Å—è—Ü"])
        if not x_domain:
            st.info(f"–ù–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤ –¥–ª—è ¬´{met}¬ª."); continue
        fig = go.Figure()

        # –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤: –∫–∞–∫ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–∞–π–¥–±–∞—Ä–µ (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –∞–ª—Ñ–∞–≤–∏—Ç)
        region_order = [r for r in regions if r in gp["–†–µ–≥–∏–æ–Ω"].astype(str).unique()]
        # —Ä–µ–∑–µ—Ä–≤: –¥–æ–±–∞–≤–∏–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ (–Ω–∞ —Å–ª—É—á–∞–π —Ñ–∏–ª—å—Ç—Ä–æ–≤)
        region_order += [r for r in sorted(gp["–†–µ–≥–∏–æ–Ω"].astype(str).unique()) if r not in region_order]

        # —á—Ç–æ–±—ã –ª–µ–≥–µ–Ω–¥–∞ –Ω–µ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–ª–∞ –ø–æ—Ä—è–¥–æ–∫
        fig.update_layout(
            legend=dict(traceorder="normal"),
            hovermode="x unified",
        )

        tickfmt, suf = y_fmt_for_metric(met)
        def fmt_hover(v):
            if v is None or (isinstance(v, float) and np.isnan(v)): return "‚Äî"
            if tickfmt == ",.0f": return f"{v:,.0f}{suf}".replace(",", " ")
            if tickfmt == ".2f": return f"{v:.2f}{suf}"
            return f"{v:,.2f}{suf}".replace(",", " ")

        hovertemplate = (
            "<b>–†–µ–≥–∏–æ–Ω: %{customdata[0]}</b><br>"
            "–ú–µ—Å—è—Ü: %{x}<br>"
            "–ó–Ω–∞—á–µ–Ω–∏–µ: %{customdata[1]}<extra></extra>"
        )

        any_drawn = False
        for rank, reg in enumerate(region_order):
            t = gp[gp["–†–µ–≥–∏–æ–Ω"].astype(str) == reg].groupby("–ú–µ—Å—è—Ü", as_index=False)["–ó–Ω–∞—á–µ–Ω–∏–µ"].sum()
            series = t.set_index("–ú–µ—Å—è—Ü")["–ó–Ω–∞—á–µ–Ω–∏–µ"].reindex(x_domain)
            if series.isna().all(): 
                continue
            any_drawn = True

            series_vals = series.values.astype(float)
            hover_vals  = [fmt_hover(v) for v in series_vals]

            fig.add_trace(go.Scatter(
                x=series.index, y=series_vals,
                mode="lines" if fast_plot else "lines+markers",
                name=reg,
                connectgaps=False,
                line=dict(color=color_map.get(reg)),
                legendgroup=reg,
                legendrank=rank,                  # ‚¨ÖÔ∏è –ø–æ—Ä—è–¥–æ–∫ –≤ –ª–µ–≥–µ–Ω–¥–µ/—Ö–æ–≤–µ—Ä–µ
                customdata=np.column_stack([np.full(len(series), reg), hover_vals]),
                hovertemplate=hovertemplate
            ))

            if (not fast_plot) and show_trend:
                y_vals = series.values.astype(float); mask = ~np.isnan(y_vals)
                if mask.sum() >= 2:
                    x_pos = np.arange(len(series.index))
                    k, b = np.polyfit(x_pos[mask], y_vals[mask], 1)
                    fig.add_trace(go.Scatter(
                        x=series.index, y=k * x_pos + b,
                        mode="lines",
                        name=f"{reg} ¬∑ —Ç—Ä–µ–Ω–¥",
                        line=dict(dash="dot", width=2, color=color_map.get(reg)),
                        showlegend=False,
                        hoverinfo="skip",           # ‚¨ÖÔ∏è —Ç—Ä–µ–Ω–¥—ã –≤ —Ö–æ–≤–µ—Ä –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç
                        legendgroup=reg,
                        legendrank=rank
                    ))
        if not any_drawn:
            st.info(f"–î–ª—è ¬´{met}¬ª –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –Ω–æ –ø–æ—Å–ª–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –≤—Å–µ —Å–µ—Ä–∏–∏ –ø—É—Å—Ç—ã–µ (—Ä–∞–∑–Ω—ã–µ –º–µ—Å—è—Ü—ã —É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤). –í—ã–±–µ—Ä–∏—Ç–µ ¬´–¢–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Å—è—Ü—ã¬ª –∏–ª–∏ —Å—É–∑—å—Ç–µ –ø–µ—Ä–∏–æ–¥.")
            continue

        rule = aggregation_rule(met)
        rule_text = '–°—É–º–º–∞' if rule=='sum' else '–°—Ä–µ–¥–Ω–µ–µ' if rule=='mean' else '–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü'
        subtitle = f"–ò—Å—Ç–æ—á–Ω–∏–∫: —Å—Ç—Ä–æ–∫–∏ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥: {rule_text}."
        fig.update_layout(title={'text': f"{met}<br><sup>{subtitle}</sup>", 'x':0}, hovermode="x unified", margin=dict(t=70,l=0,r=0,b=0))
        fig.update_yaxes(tickformat=tickfmt, ticksuffix=suf.strip(), title_text=suf.strip() or None)

        st.plotly_chart(fig, use_container_width=True)
        with st.expander(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ¬´{met}¬ª"):
            st.dataframe(gp.pivot_table(index="–ú–µ—Å—è—Ü", columns="–†–µ–≥–∏–æ–Ω", values="–ó–Ω–∞—á–µ–Ω–∏–µ", aggfunc="sum").reindex(x_domain), use_container_width=True)


def dynamics_compare_block(df_a: pd.DataFrame, df_b: pd.DataFrame,
                           regions: list[str], months_range: list[str],
                           color_map: Dict[str, str], year_a: int, year_b: int):
    st.subheader(f"üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º: {year_b} vs {year_a}")

    raw_metric_names = sorted(set(pd.concat([df_a, df_b])["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique()))

    default_selection = [m for m in [Metrics.REVENUE.value, Metrics.LOAN_ISSUE.value, Metrics.MARKUP_PCT.value] if m in raw_metric_names]

    metrics = st.multiselect("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏", options=raw_metric_names,
                             default=default_selection, key="dyn_cmp_metrics")
    c1, c2 = st.columns(2)
    only_actual = c1.checkbox("–¢–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Å—è—Ü—ã", True, key="dyn_cmp_actual")
    show_trend = c2.checkbox("–õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞", False, key="dyn_cmp_trend")
    if not metrics or not months_range:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø–µ—Ä–∏–æ–¥."); return

    for met in metrics:
        rule = aggregation_rule(met)
        rule_text = '–°—É–º–º–∞' if rule=='sum' else '–°—Ä–µ–¥–Ω–µ–µ' if rule=='mean' else '–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü'
        st.caption(f"–î–∞–Ω–Ω—ã–µ ‚Äî –∏–∑ —Å—Ç—Ä–æ–∫ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥: **{rule_text}**.")

        gp_a = get_monthly_totals_from_file(df_a, tuple(regions), met)
        gp_b = get_monthly_totals_from_file(df_b, tuple(regions), met)
        if gp_a.empty and gp_b.empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ ¬´{met}¬ª."); continue

        xA = sorted_months_safe(gp_a["–ú–µ—Å—è—Ü"]) if not gp_a.empty else []
        xB = sorted_months_safe(gp_b["–ú–µ—Å—è—Ü"]) if not gp_b.empty else []
        x_domain = [m for m in months_range if (m in xA or m in xB)] if only_actual else months_range
        if not x_domain:
            st.info(f"–ù–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤ –¥–ª—è ¬´{met}¬ª."); continue

        fig = go.Figure()
        fig.update_layout(
            hovermode="x unified",
            legend=dict(
                traceorder="normal",   # –Ω–µ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å
                tracegroupgap=10       # –≤–∏–∑—É–∞–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å —Ä–µ–≥–∏–æ–Ω—ã
            )
        )

        def clean_region_label(reg: str) -> str:
            s = str(reg)
            s = re.sub(r"\b20\d{2}\b", "", s)         # –≤—ã–∫–∏–Ω—É—Ç—å ¬´2024/2025¬ª –∏–∑ –∏–º–µ–Ω–∏ —Ä–µ–≥–∏–æ–Ω–∞
            s = re.sub(r"\b\d{1,2}\s*-\s*\d{1,2}\b", "", s)  # ¬´1-8¬ª
            s = re.sub(r"[_\.\-‚Äì‚Äî]", " ", s)
            s = re.sub(r"\s{2,}", " ", s).strip()
            return s

        all_regs = set(gp_a["–†–µ–≥–∏–æ–Ω"].astype(str)).union(set(gp_b["–†–µ–≥–∏–æ–Ω"].astype(str)))
        region_order = [r for r in regions if r in all_regs] + [r for r in sorted(all_regs) if r not in regions]
        label_map = {r: clean_region_label(r) for r in all_regs}

        year_order = [year_a, year_b]          # –ø–æ—Ä—è–¥–æ–∫ –∏ –≤ –ª–µ–≥–µ–Ω–¥–µ, –∏ –≤ —Ö–æ–≤–µ—Ä–µ
        dash_map   = {year_a: "dot", year_b: "solid"}  # ¬´–±–∞–∑–∞¬ª = –ø—É–Ω–∫—Ç–∏—Ä, ¬´—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ¬ª = —Å–ø–ª–æ—à–Ω–∞—è

        tickfmt, suf = y_fmt_for_metric(met)
        def fmt_hover(v):
            if v is None or (isinstance(v, float) and np.isnan(v)): return "‚Äî"
            if tickfmt == ",.0f": return f"{v:,.0f}{suf}".replace(",", " ")
            if tickfmt == ".2f": return f"{v:.2f}{suf}"
            return f"{v:,.2f}{suf}".replace(",", " ")

        hovertemplate = (
            "<b>%{customdata[0]}</b><br>"
            "–ì–æ–¥: %{customdata[1]}<br>"
            "–ú–µ—Å—è—Ü: %{x}<br>"
            "–ó–Ω–∞—á–µ–Ω–∏–µ: %{customdata[2]}<extra></extra>"
        )

        for r_rank, reg in enumerate(region_order):
            for y in year_order:
                gp = gp_a if y == year_a else gp_b
                if gp.empty: 
                    continue
                t = gp[gp["–†–µ–≥–∏–æ–Ω"].astype(str) == reg].groupby("–ú–µ—Å—è—Ü", as_index=False)["–ó–Ω–∞—á–µ–Ω–∏–µ"].sum()
                s = t.set_index("–ú–µ—Å—è—Ü")["–ó–Ω–∞—á–µ–Ω–∏–µ"].reindex(x_domain)
                if s.isna().all():
                    continue

                vals = s.values.astype(float)
                fig.add_trace(go.Scatter(
                    x=s.index,
                    y=vals,
                    mode="lines+markers",
                    name=f"{label_map.get(reg, reg)} ¬∑ {y}",
                    line=dict(color=color_map.get(reg), dash=dash_map[y]),
                    legendgroup=label_map.get(reg, reg),     # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–µ–≥–µ–Ω–¥–æ–π –ø–æ —Ä–µ–≥–∏–æ–Ω—É
                    legendrank=r_rank * 10 + (0 if y == year_a else 1),  # —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
                    customdata=np.column_stack([
                        np.full(len(s), label_map.get(reg, reg)),
                        np.full(len(s), y),
                        [fmt_hover(v) for v in vals]
                    ]),
                    hovertemplate=hovertemplate
                ))

                if show_trend:
                    mask = ~np.isnan(vals)
                    if mask.sum() >= 2:
                        xp = np.arange(len(vals))
                        k, b = np.polyfit(xp[mask], vals[mask], 1)
                        fig.add_trace(go.Scatter(
                            x=s.index, y=k * xp + b,
                            mode="lines",
                            line=dict(color=color_map.get(reg), dash="dash"),
                            name=f"{label_map.get(reg, reg)} ¬∑ —Ç—Ä–µ–Ω–¥ ¬∑ {y}",
                            showlegend=False,
                            hoverinfo="skip",                # —Ç—Ä–µ–Ω–¥ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ö–æ–≤–µ—Ä
                            legendgroup=label_map.get(reg, reg),
                            legendrank=r_rank * 10 + (0 if y == year_a else 1)
                        ))
        subtitle = f"–ò—Å—Ç–æ—á–Ω–∏–∫: —Å—Ç—Ä–æ–∫–∏ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥: {rule_text}."
        fig.update_layout(title={'text': f"{met}<br><sup>{subtitle}</sup>", 'x': 0},
                          hovermode="x unified", margin=dict(t=70, l=0, r=0, b=0))
        fig.update_yaxes(tickformat=tickfmt, ticksuffix=suf.strip(), title_text=suf.strip() or None)
        st.plotly_chart(fig, use_container_width=True)

def _aggregate_period(df_year: pd.DataFrame, regions: list[str], metric: str, months: list[str]) -> dict[str, float]:
    """–ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å—Ç—Ä–æ–∫ '–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É' –ø–æ –ø—Ä–∞–≤–∏–ª—É –º–µ—Ç—Ä–∏–∫–∏."""
    dfm = get_monthly_totals_from_file(df_year, tuple(regions), metric)
    if dfm.empty:
        return {}
    part = dfm[dfm["–ú–µ—Å—è—Ü"].astype(str).isin(months)].copy()
    if part.empty:
        return {}
    rule = aggregation_rule(metric)
    out = {}
    for reg, g in part.groupby("–†–µ–≥–∏–æ–Ω"):
        vals = pd.to_numeric(g["–ó–Ω–∞—á–µ–Ω–∏–µ"], errors="coerce").dropna()
        if vals.empty:
            continue
        if rule == "sum":
            out[str(reg)] = float(vals.sum())
        elif rule == "mean":
            out[str(reg)] = float(vals.mean())
        elif rule == "last":
            out[str(reg)] = float(vals.iloc[-1])
        else:
            out[str(reg)] = float(vals.mean())
    return out

def yoy_summary_block(df_a: pd.DataFrame, df_b: pd.DataFrame, regions: list[str], months_range: list[str], years: tuple[int,int]):
    st.subheader("üìä –ò—Ç–æ–≥–∏ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º: –≥–æ–¥ B vs –≥–æ–¥ A")
    raw_metric_names = sorted(set(pd.concat([df_a, df_b])["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique()))
    if not raw_metric_names:
        st.info("–ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        return
    metric = st.selectbox("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", options=raw_metric_names,
                          index=(raw_metric_names.index(Metrics.REVENUE.value) if Metrics.REVENUE.value in raw_metric_names else 0))
    yA, yB = years
    a = _aggregate_period(df_a, regions, metric, months_range)
    b = _aggregate_period(df_b, regions, metric, months_range)

    regs = sorted(set(a) | set(b))
    rows = []
    for r in regs:
        vA = a.get(r, np.nan)
        vB = b.get(r, np.nan)
        d  = vB - vA if pd.notna(vA) and pd.notna(vB) else np.nan
        dp = (d / vA * 100.0) if pd.notna(d) and pd.notna(vA) and vA != 0 else np.nan
        rows.append({"–†–µ–≥–∏–æ–Ω": r, f"{metric} ¬∑ {yA}": vA, f"{metric} ¬∑ {yB}": vB,
                     "Œî (–∞–±—Å.)": d, "Œî (%)": dp})

    if not rows:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")
        return

    df = pd.DataFrame(rows).set_index("–†–µ–≥–∏–æ–Ω")
    is_money  = "—Ä—É–±" in metric
    is_pct    = is_percent_metric(metric)
    is_days   = "–¥–Ω–µ–π" in metric
    cfg = {
        f"{metric} ¬∑ {yA}": number_column_config(f"{metric} ¬∑ {yA}", money=is_money, percent=is_pct, days=is_days),
        f"{metric} ¬∑ {yB}": number_column_config(f"{metric} ¬∑ {yB}", money=is_money, percent=is_pct, days=is_days),
        "Œî (–∞–±—Å.)": number_column_config("Œî (–∞–±—Å.)", money=is_money and not is_pct and not is_days),
        "Œî (%)": st.column_config.NumberColumn("Œî (%)", format="%.1f%%"),
    }
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –¥–µ–ª—å—Ç–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    df = df.sort_values(by="Œî (–∞–±—Å.)", ascending=False)
    st.dataframe(df, use_container_width=True, column_config=cfg)

    st.markdown("‚Äî")
    st.markdown("**Œî –ø–æ –º–µ—Å—è—Ü–∞–º (–≥–æ–¥ B ‚àí –≥–æ–¥ A)**")
    # –±–µ—Ä—ë–º –ø–æ–º–µ—Å—è—á–Ω—ã–µ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª –∏ —Å—Ç—Ä–æ–∏–º —Ä–∞–∑–Ω–∏—Ü—É
    mA = month_totals_matrix(df_a, tuple(regions), metric)
    mB = month_totals_matrix(df_b, tuple(regions), metric)
    if mA.empty and mB.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–∫–∞—Ä—Ç—ã –¥–µ–ª—å—Ç.")
        return
    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—è—Ü—ã
    mA = mA[mA["–ú–µ—Å—è—Ü"].astype(str).isin(months_range)]
    mB = mB[mB["–ú–µ—Å—è—Ü"].astype(str).isin(months_range)]
    pA = mA.pivot_table(index="–†–µ–≥–∏–æ–Ω", columns="–ú–µ—Å—è—Ü", values="–ó–Ω–∞—á–µ–Ω–∏–µ", aggfunc="first")
    pB = mB.pivot_table(index="–†–µ–≥–∏–æ–Ω", columns="–ú–µ—Å—è—Ü", values="–ó–Ω–∞—á–µ–Ω–∏–µ", aggfunc="first")
    delta = (pB - pA).reindex(columns=months_range)
    if delta.empty:
        st.info("–ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–µ–ª—å—Ç.")
    else:
        fig = px.imshow(delta, text_auto=".1f", aspect="auto", color_continuous_scale="RdBu", origin="upper",
                        title=f"Œî {metric}: {yB} ‚àí {yA}")
        # –ø–æ–Ω—è—Ç–Ω—ã–π —Ö–æ–≤–µ—Ä
        if "—Ä—É–±" in metric:
            fig.update_traces(hovertemplate="–†–µ–≥–∏–æ–Ω: %{y}<br>–ú–µ—Å—è—Ü: %{x}<br>Œî: %{z:,.0f} ‚ÇΩ<extra></extra>".replace(",", " "))
        elif is_percent_metric(metric):
            fig.update_traces(hovertemplate="–†–µ–≥–∏–æ–Ω: %{y}<br>–ú–µ—Å—è—Ü: %{x}<br>Œî: %{z:.2f}%<extra></extra>")
        elif "–¥–Ω–µ–π" in metric:
            fig.update_traces(hovertemplate="–†–µ–≥–∏–æ–Ω: %{y}<br>–ú–µ—Å—è—Ü: %{x}<br>Œî: %{z:.2f} –¥–Ω.<extra></extra>")
        else:
            fig.update_traces(hovertemplate="–†–µ–≥–∏–æ–Ω: %{y}<br>–ú–µ—Å—è—Ü: %{x}<br>Œî: %{z:,.0f}<extra></extra>".replace(",", " "))
        fig.update_layout(margin=dict(t=40, l=0, r=0, b=0), coloraxis_colorbar_title="Œî")
        st.plotly_chart(fig, use_container_width=True)

def treemap_heatmap_block(df_all: pd.DataFrame, regions: list[str], months_range: list[str], color_map: Dict[str, str]):
    st.subheader("üó∫Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º")
    st.caption("Treemap ‚Äî –≤–∫–ª–∞–¥ —Ñ–∏–ª–∏–∞–ª–æ–≤; —Ç–µ–ø–ª–æ–∫–∞—Ä—Ç–∞ ‚Äî –ø–æ–º–µ—Å—è—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤.")

    sub = strip_totals_rows(df_all)
    sub = sub[(sub["–†–µ–≥–∏–æ–Ω"].isin(regions)) & (sub["–ú–µ—Å—è—Ü"].astype(str).isin(months_range))]
    if sub.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."); return

    raw_metric_names = sorted(set(df_all["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique()))
    if not raw_metric_names:
        st.warning("–ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # ==== –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (Treemap) ====
    st.markdown("**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º (–∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü)**")
    metric = st.selectbox(
        "–ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –ø–ª–æ—â–∞–¥–∏",
        options=raw_metric_names,
        index=(raw_metric_names.index(Metrics.REVENUE.value) if Metrics.REVENUE.value in raw_metric_names else 0),
        help=METRIC_HELP.get(Metrics.REVENUE.value, "")
    )

    months_present = sorted_months_safe(sub["–ú–µ—Å—è—Ü"])
    if not months_present:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥."); return
    month_for_tree = st.selectbox("–ú–µ—Å—è—Ü –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", options=months_present, index=len(months_present)-1)

    tree_base = sub[(sub["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"] == metric) & (sub["–ú–µ—Å—è—Ü"].astype(str) == month_for_tree)]
    tree_data = (tree_base.groupby(["–†–µ–≥–∏–æ–Ω","–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"], observed=True)["–ó–Ω–∞—á–µ–Ω–∏–µ"]
                       .sum().reset_index().rename(columns={"–ó–Ω–∞—á–µ–Ω–∏–µ": "Size"}))

    if not tree_data.empty and pd.to_numeric(tree_data["Size"], errors="coerce").fillna(0).abs().sum() > 0:
        fig_t = px.treemap(
            tree_data, path=[px.Constant("–í—Å–µ"), "–†–µ–≥–∏–æ–Ω", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"],
            values="Size", color="–†–µ–≥–∏–æ–Ω", color_discrete_map=color_map
        )
        if "—Ä—É–±" in metric:
            fig_t.update_traces(texttemplate="%{label}<br>%{value:,.0f}".replace(",", " "),
                                hovertemplate="%{label}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{value:,.0f} ‚ÇΩ".replace(",", " "))
        elif is_percent_metric(metric):
            fig_t.update_traces(texttemplate="%{label}<br>%{value:.2f}%",
                                hovertemplate="%{label}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{value:.2f}%")
        else:
            fig_t.update_traces(texttemplate="%{label}<br>%{value:,.0f}".replace(",", " "),
                                hovertemplate="%{label}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{value:,.0f}".replace(",", " "))
        fig_t.update_layout(margin=dict(t=40,l=0,r=0,b=0), title=f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {metric} ¬∑ {month_for_tree}")
        st.plotly_chart(fig_t, use_container_width=True)
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.")

    st.divider()

    # ==== –¢–µ–ø–ª–æ–∫–∞—Ä—Ç–∞ ====
    st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º (—Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞)**")
    st.caption("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª. –î–ª—è –º–µ—Ç—Ä–∏–∫-—Å–Ω–∏–º–∫–æ–≤ (–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å, –∫–æ–ª-–≤–æ –ª–æ–º–±–∞—Ä–¥–æ–≤) –Ω–∏—á–µ–≥–æ –Ω–µ —Å—É–º–º–∏—Ä—É–µ–º ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—è—á–Ω—ã–π —Å–Ω–∏–º–æ–∫.")

    heat_metric = st.selectbox(
        "–ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è —Ç–µ–ø–ª–æ–∫–∞—Ä—Ç—ã",
        options=raw_metric_names,
        index=raw_metric_names.index(metric) if metric in raw_metric_names else 0,
        help=METRIC_HELP.get(metric, "")
    )
    by_subdiv = st.checkbox(
        "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º (–≤ —Å—Ç—Ä–æ–∫–∞—Ö)",
        value=False,
        help="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª. –í —Ä–µ–∂–∏–º–µ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º –¥–ª—è –º–µ—Ç—Ä–∏–∫-—Å–Ω–∏–º–∫–æ–≤ –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞."
    )

    if by_subdiv:
        df_loc = sub[sub["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"] == heat_metric].copy()
        df_loc["RowLabel"] = df_loc["–†–µ–≥–∏–æ–Ω"].astype(str) + " ¬∑ " + df_loc["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].astype(str)
        df_loc['–ú–µ—Å—è—Ü'] = pd.Categorical(df_loc['–ú–µ—Å—è—Ü'].astype(str), categories=ORDER, ordered=True)
        
        df_loc['__prio__'] = np.where(df_loc.get("–ò—Å—Ç–æ—á–Ω–∏–∫–§–∞–π–ª–∞", pd.Series(index=df_loc.index, dtype=object)).eq("TOTALS_FILE"), 1, 2)
        df_loc.sort_values(["RowLabel", "–ú–µ—Å—è—Ü", "__prio__"], inplace=True)

        # –ø—Ä–∞–≤–∏–ª–æ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        rule = agg_of_metric(heat_metric)
        if heat_metric in METRICS_LAST or rule == "last":
            # —Å–Ω–∏–º–æ–∫: –Ω–∏–∫–∞–∫–∏—Ö —Å—É–º–º ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω–æ (–ø–µ—Ä–≤–æ–µ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É) –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ (—Ñ–∏–ª–∏–∞–ª, –º–µ—Å—è—Ü)
            df_loc = df_loc.drop_duplicates(["RowLabel", "–ú–µ—Å—è—Ü"], keep="first")
            aggfunc = "first"
        else:
            aggfunc = "sum" if rule == "sum" else "mean"

        hm = df_loc.pivot_table(index="RowLabel", columns="–ú–µ—Å—è—Ü", values="–ó–Ω–∞—á–µ–Ω–∏–µ", aggfunc=aggfunc)
    else:
        # —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: —É–∂–µ –±–µ—Ä—ë–º —Ä–æ–≤–Ω–æ —Ç–æ, —á—Ç–æ –≤ ¬´–ò—Ç–æ–≥–æ –ø–æ –º–µ—Å—è—Ü—É¬ª
        mat = month_totals_matrix(df_all, tuple(regions), heat_metric)
        hm = mat.pivot_table(index="–†–µ–≥–∏–æ–Ω", columns="–ú–µ—Å—è—Ü", values="–ó–Ω–∞—á–µ–Ω–∏–µ", aggfunc="first")

    if 'hm' in locals() and not hm.empty:
        hm = hm.reindex(columns=[m for m in months_range if m in hm.columns])
        hm = hm.loc[hm.mean(axis=1, numeric_only=True).sort_values(ascending=False).index]

        text_fmt = ".2f" if is_percent_metric(heat_metric) else ".0f"
        fig_h = px.imshow(hm, text_auto=text_fmt, aspect="auto", color_continuous_scale="RdYlGn",
                        title=f"–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: {heat_metric}")

        # –ø–æ–Ω—è—Ç–Ω—ã–π —Ö–æ–≤–µ—Ä —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
        if "—Ä—É–±" in heat_metric:
            fig_h.update_traces(hovertemplate="–°—Ç—Ä–æ–∫–∞: %{y}<br>–ú–µ—Å—è—Ü: %{x}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{z:,.0f} ‚ÇΩ<extra></extra>".replace(",", " "))
        elif is_percent_metric(heat_metric):
            fig_h.update_traces(hovertemplate="–°—Ç—Ä–æ–∫–∞: %{y}<br>–ú–µ—Å—è—Ü: %{x}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{z:.2f}%<extra></extra>")
        elif "–¥–Ω–µ–π" in heat_metric:
            fig_h.update_traces(hovertemplate="–°—Ç—Ä–æ–∫–∞: %{y}<br>–ú–µ—Å—è—Ü: %{x}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{z:.2f} –¥–Ω.<extra></extra>")
        else:
            fig_h.update_traces(hovertemplate="–°—Ç—Ä–æ–∫–∞: %{y}<br>–ú–µ—Å—è—Ü: %{x}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{z:,.0f}<extra></extra>".replace(",", " "))

        fig_h.update_layout(margin=dict(t=40,l=0,r=0,b=0), coloraxis_colorbar_title="–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å")
        st.plotly_chart(fig_h, use_container_width=True)
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–∫–∞—Ä—Ç—ã.")


def scatter_plot_block(df_all: pd.DataFrame, monthly_data: pd.DataFrame, color_map: Dict[str, str]):
    st.subheader("üî¨ –í–∑–∞–∏–º–æ—Å–≤—è–∑–∏ (—Ç–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫)")
    st.caption("–ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ ‚Äî —ç—Ç–æ –æ–¥–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤ –æ–¥–∏–Ω –∏–∑ –º–µ—Å—è—Ü–µ–≤. –ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.")
    if monthly_data.empty: st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."); return
    with st.expander("–ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?", expanded=False):
        st.info("""
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±–µ—Ä–∏—Ç–µ **X = –¢–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–Ω–Ω—ã–π –Ω–∏–∂–µ —Å—É–º–º—ã –∑–∞–π–º–∞ –ù–Æ–ó (—Ä—É–±)** –∏ **Y = –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –ù–Æ–ó**.
            –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.
        """)
    available_months = sorted_months_safe(monthly_data['–ú–µ—Å—è—Ü'])
    selected_months = st.multiselect("–ú–µ—Å—è—Ü—ã:", options=available_months, default=available_months)
    if not selected_months: st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Å—è—Ü."); return
    plot_data = monthly_data[monthly_data['–ú–µ—Å—è—Ü'].isin(selected_months)].copy()

    raw_metric_names = set(df_all["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique())
    metric_options = sorted([c for c in plot_data.columns if c in raw_metric_names])

    if len(metric_options) < 2: st.warning("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞."); return
    c1, c2, c3 = st.columns(3)
    default_x = Metrics.BELOW_LOAN.value if Metrics.BELOW_LOAN.value in metric_options else metric_options[0]
    default_y = Metrics.MARKUP_PCT.value if Metrics.MARKUP_PCT.value in metric_options else metric_options[min(1, len(metric_options)-1)]
    default_size = Metrics.REVENUE.value if Metrics.REVENUE.value in metric_options else None
    x_axis = c1.selectbox("–û—Å—å X", options=metric_options, index=metric_options.index(default_x) if default_x in metric_options else 0, key="scatter_x")
    y_axis = c2.selectbox("–û—Å—å Y", options=metric_options, index=metric_options.index(default_y) if default_y in metric_options else 0, key="scatter_y")
    size_col = c3.selectbox("–†–∞–∑–º–µ—Ä —Ç–æ—á–µ–∫", options=[None] + metric_options, index=([None] + metric_options).index(default_size) if default_size in metric_options else 0, key="scatter_size")

    if x_axis == y_axis: st.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Å–µ–π."); return
    df2 = plot_data.dropna(subset=[x_axis, y_axis]).copy()
    size_arg = "_size_" if size_col and pd.to_numeric(df2[size_col], errors="coerce").fillna(0).gt(0).any() else None
    if size_arg: df2[size_arg] = pd.to_numeric(df2[size_col], errors="coerce").fillna(0)
    df2['hover_text'] = df2['–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'].astype(str) + " (" + df2['–ú–µ—Å—è—Ü'].astype(str) + ")"
    fig = px.scatter(
        df2, x=x_axis, y=y_axis, color="–†–µ–≥–∏–æ–Ω", size=size_arg, size_max=40,
        hover_name="hover_text", color_discrete_map=color_map,
        title=f"–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: '{y_axis}' –æ—Ç '{x_axis}'"
    )
    def get_fmt(m):
        if "—Ä—É–±" in m: return "%{value:,.0f} ‚ÇΩ".replace(",", " ")
        if str(m).endswith("(%)") or "–Ω–∞—Ü–µ–Ω–∫" in m.lower() or "–¥–æ–ª—è" in m.lower() or m == Metrics.YIELD.value: return "%{value:.2f}%"
        if "–¥–Ω–µ–π" in m: return "%{value:.2f} –¥–Ω."
        return "%{value:,.2f}"
    fig.update_traces(hovertemplate=f"<b>%{{hovertext}}</b><br><br>{x_axis}: {get_fmt(x_axis).replace('value', 'x')}<br>{y_axis}: {get_fmt(y_axis).replace('value', 'y')}<extra></extra>")
    st.plotly_chart(fig, use_container_width=True)


def scatter_plot_block_years(df_all: pd.DataFrame, monthly_data: pd.DataFrame, color_map: Dict[str, str], year_a: int, year_b: int):
    st.subheader("üî¨ –í–∑–∞–∏–º–æ—Å–≤—è–∑–∏ (A vs B)")
    if monthly_data.empty: st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."); return
    available_months = sorted_months_safe(monthly_data['–ú–µ—Å—è—Ü'])
    selected_months = st.multiselect("–ú–µ—Å—è—Ü—ã:", options=available_months, default=available_months, key="scm_months")
    if not selected_months: st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Å—è—Ü."); return
    df2 = monthly_data[monthly_data['–ú–µ—Å—è—Ü'].isin(selected_months)].copy()

    raw_metric_names = set(df_all["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique())
    metric_options = sorted([m for m in df2.columns if m in raw_metric_names])

    if len(metric_options) < 2: st.warning("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞."); return
    c1, c2 = st.columns(2)
    x_axis = c1.selectbox("–û—Å—å X", options=metric_options, index=0, key="scm_x")
    y_axis = c2.selectbox("–û—Å—å Y", options=metric_options, index=1 if len(metric_options)>1 else 0, key="scm_y")

    fig = px.scatter(df2, x=x_axis, y=y_axis, color="–ì–æ–¥", symbol="–†–µ–≥–∏–æ–Ω",
                     hover_name="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", title=f"'{y_axis}' –æ—Ç '{x_axis}' ¬∑ {year_b} vs {year_a}")
    st.plotly_chart(fig, use_container_width=True)

def weighted_corr(df: pd.DataFrame, weights: pd.Series) -> pd.DataFrame:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É."""
    valid_idx = weights.dropna().index.intersection(df.dropna().index)
    weights = weights.loc[valid_idx]
    df = df.loc[valid_idx]

    if weights.sum() <= 0 or (weights < 0).any() or len(df) < 2:
        return pd.DataFrame(index=df.columns, columns=df.columns)

    cov_matrix = np.cov(df.T, aweights=weights)
    std_devs = np.sqrt(np.diag(cov_matrix))

    with np.errstate(divide='ignore', invalid='ignore'):
        corr_matrix = cov_matrix / np.outer(std_devs, std_devs)

    corr_matrix[np.isinf(corr_matrix)] = np.nan
    return pd.DataFrame(corr_matrix, index=df.columns, columns=df.columns)

def correlations_block(df_all: pd.DataFrame, monthly_data: pd.DataFrame):
    st.subheader("üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (Pearson)")
    if monthly_data.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."); return

    with st.expander("–ö–∞–∫ —á–∏—Ç–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", expanded=True):
        st.info("""
            - **+1** ‚Äî —Å–∏–ª—å–Ω–∞—è –ø—Ä—è–º–∞—è —Å–≤—è–∑—å, **-1** ‚Äî —Å–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è, **0** ‚Äî —Å–≤—è–∑–∏ –Ω–µ—Ç.
            - –ü—É–ª –ø–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–∞–º –¥–∞—ë—Ç ¬´—Å—Ä–µ–¥–Ω—é—é¬ª –∫–∞—Ä—Ç–∏–Ω—É; –¥–ª—è –Ω—é–∞–Ω—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º ¬´–ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º¬ª.
            - **–í–∑–≤–µ—à–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è** –ø—Ä–∏–¥–∞—ë—Ç –±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º —Å –≤—ã—Å–æ–∫–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º –≤–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –í—ã—Ä—É—á–∫–æ–π).
            - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è ‚â† –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç—å.
        """)

    has_multiple_years = '–ì–æ–¥' in monthly_data.columns and monthly_data['–ì–æ–¥'].nunique() > 1

    if has_multiple_years:
        analysis_scope = st.radio("–ú–∞—Å—à—Ç–∞–± –∞–Ω–∞–ª–∏–∑–∞", ["–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π", "–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –≥–æ–¥–∞–º"], horizontal=True, key="corr_scope")
    else:
        analysis_scope = "–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π"

    mode = st.radio("–†–µ–∂–∏–º —Ä–∞—Å—á—ë—Ç–∞", ["–û–±—â–∏–π –ø–æ –≤—ã–±–æ—Ä–∫–µ", "–ü–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–≥–∏–æ–Ω—É"], horizontal=True, key="corr_mode")
    use_weights = st.checkbox("–í–∑–≤–µ—Å–∏—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", help="–£—á–∏—Ç—ã–≤–∞—Ç—å –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∏) –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Ä–∞–∑–º–µ—Ä—É –≤—ã—Ä—É—á–∫–∏.", key="corr_weights")

    raw_metric_names = set(df_all["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique())

    weight_col = None
    if use_weights:
        numeric_cols = sorted([c for c in monthly_data.columns if pd.api.types.is_numeric_dtype(monthly_data[c]) and c != '–ì–æ–¥' and c in raw_metric_names])
        if not numeric_cols:
            st.warning("–ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–µ—Å–∞.")
            use_weights = False
        else:
            default_idx = numeric_cols.index(Metrics.REVENUE.value) if Metrics.REVENUE.value in numeric_cols else 0
            weight_col = st.selectbox("–í–µ—Å:", options=numeric_cols, index=default_idx, key="corr_weight_col")


    def draw_corr(df: pd.DataFrame, title: str, weights_col_name: str | None = None):
        metrics_for_corr = sorted([c for c in df.columns if pd.api.types.is_numeric_dtype(df[c]) and c != '–ì–æ–¥' and c in raw_metric_names])

        if weights_col_name and weights_col_name in metrics_for_corr:
            metrics_for_corr.remove(weights_col_name)

        if len(metrics_for_corr) < 2 or len(df) < 3:
            st.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ ({title})."); return

        df_for_corr = df[metrics_for_corr]

        if weights_col_name:
            weights = df[weights_col_name]
            cm = weighted_corr(df_for_corr, weights)
            title += f" (–≤–∑–≤–µ—à–µ–Ω–Ω–æ –ø–æ '{weights_col_name}')"
        else:
            cm = df_for_corr.corr(method="pearson")

        fig = go.Figure(data=go.Heatmap(
            z=cm.values, x=cm.columns, y=cm.index,
            colorscale="RdBu", zmin=-1, zmax=1,
            text=cm.round(2), texttemplate="%{text}",
            colorbar=dict(tickformat=".2f", title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
        ))
        fig.update_layout(height=600, title=title, margin=dict(t=60,l=0,r=0,b=0))
        st.plotly_chart(fig, use_container_width=True)

    if analysis_scope == "–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –≥–æ–¥–∞–º":
        years = sorted(monthly_data['–ì–æ–¥'].dropna().unique())
        cols = st.columns(len(years))
        for i, year in enumerate(years):
            with cols[i]:
                df_year = monthly_data[monthly_data['–ì–æ–¥'] == year]
                if mode == "–û–±—â–∏–π –ø–æ –≤—ã–±–æ—Ä–∫–µ":
                    draw_corr(df_year, f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ {year}", weights_col_name=weight_col)
                else:
                    regs = sorted(df_year["–†–µ–≥–∏–æ–Ω"].dropna().astype(str).unique())
                    if not regs: st.info(f"–ù–µ—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ {year}."); continue
                    for reg in regs:
                        df_reg = df_year[df_year["–†–µ–≥–∏–æ–Ω"].astype(str) == reg]
                        draw_corr(df_reg, f"{year} - {reg}", weights_col_name=weight_col)
    else:
        if mode == "–û–±—â–∏–π –ø–æ –≤—ã–±–æ—Ä–∫–µ":
            draw_corr(monthly_data, "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞", weights_col_name=weight_col)
        else:
            regs = sorted(monthly_data["–†–µ–≥–∏–æ–Ω"].dropna().astype(str).unique())
            if not regs: st.info("–ù–µ—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."); return
            tabs = st.tabs(regs)
            for i, reg in enumerate(regs):
                with tabs[i]:
                    df_reg = monthly_data[monthly_data["–†–µ–≥–∏–æ–Ω"].astype(str) == reg]
                    draw_corr(df_reg, f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ ‚Äî —Ä–µ–≥–∏–æ–Ω: {reg}", weights_col_name=weight_col)

def monthly_totals_table(df_raw: pd.DataFrame, regions: list[str], months_range: list[str], all_available_months: list[str]) -> pd.DataFrame:
    df = strip_totals_rows(df_raw)
    if df.empty or not months_range:
        return pd.DataFrame()
    sub = df[(df["–†–µ–≥–∏–æ–Ω"].isin(regions))].copy()
    if sub.empty:
        return pd.DataFrame()

    all_metrics = sorted(sub["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].dropna().unique().tolist())
    rows = []

    for metric in all_metrics:
        dfm = get_monthly_totals_from_file(df_raw, tuple(regions), metric)
        row = {"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": metric}
        rule = aggregation_rule(metric)

        for m in months_range:
            vals = pd.to_numeric(dfm.loc[dfm["–ú–µ—Å—è—Ü"].astype(str) == m, "–ó–Ω–∞—á–µ–Ω–∏–µ"], errors="coerce")
            row[m] = float(vals.sum()) if not vals.empty else np.nan

        avail = [m for m in months_range if pd.notna(row.get(m))]
        if not avail:
            row["–ò—Ç–æ–≥–æ"] = np.nan
        else:
            series = pd.Series([row[m] for m in avail], index=avail)
            if rule == "sum":
                row["–ò—Ç–æ–≥–æ"] = float(series.sum())
            elif rule == "mean":
                row["–ò—Ç–æ–≥–æ"] = float(series.mean())
            elif rule == "last":
                row["–ò—Ç–æ–≥–æ"] = float(series.iloc[-1])
            else:
                row["–ò—Ç–æ–≥–æ"] = np.nan
        rows.append(row)

    dfw = pd.DataFrame(rows, columns=["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"] + months_range + ["–ò—Ç–æ–≥–æ"])
    def row_order(s): return s.map(lambda name: 0 if name in {Metrics.DEBT.value, Metrics.DEBT_UNITS.value} else (1 if "—Ä—É–±" in name or "—à—Ç" in name else 2))
    return dfw.sort_values(by="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", key=row_order).reset_index(drop=True)

def provided_totals_from_files(df_all: pd.DataFrame, regions: list[str], months_range: list[str]) -> Tuple[pd.DataFrame, pd.DataFrame]:
    df_tot = df_all[
        (df_all["–†–µ–≥–∏–æ–Ω"].isin(regions)) &
        df_all["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].str.contains(r"^\s*–∏—Ç–æ–≥–æ\b", case=False, na=False) &
        (df_all["–ú–µ—Å—è—Ü"].astype(str).isin(months_range + ["–ò—Ç–æ–≥–æ"]))
    ].copy()
    if df_tot.empty:
        return pd.DataFrame(), pd.DataFrame()

    df_tot["__prio__"] = np.where(df_tot.get("–ò—Å—Ç–æ—á–Ω–∏–∫–§–∞–π–ª–∞", pd.Series(index=df_tot.index, dtype=object)).eq("TOTALS_FILE"), 1, 2)
    df_tot.sort_values(["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å","–ú–µ—Å—è—Ü","__prio__"], inplace=True)
    best = df_tot.groupby(["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å","–ú–µ—Å—è—Ü"], observed=True).first().reset_index()

    totals_row = best.pivot_table(index="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", columns="–ú–µ—Å—è—Ü", values="–ó–Ω–∞—á–µ–Ω–∏–µ", aggfunc="first").reset_index()
    cols_ordered = ["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"] + [m for m in months_range if m in totals_row.columns] + (["–ò—Ç–æ–≥–æ"] if "–ò—Ç–æ–≥–æ" in totals_row.columns else [])
    totals_row = totals_row.reindex(columns=cols_ordered)

    totals_col = pd.DataFrame()
    if "–ò—Ç–æ–≥–æ" in best["–ú–µ—Å—è—Ü"].astype(str).unique():
        it_col = best[best["–ú–µ—Å—è—Ü"].astype(str) == "–ò—Ç–æ–≥–æ"][["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ"]].rename(columns={"–ó–Ω–∞—á–µ–Ω–∏–µ": "–ò—Ç–æ–≥–æ"})
        totals_col = it_col.groupby("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å")["–ò—Ç–æ–≥–æ"].first().reset_index()

    return totals_row, totals_col

def reconciliation_block(df_all: pd.DataFrame, regions: list[str], months_range: list[str], all_available_months: list[str]):
    st.subheader("üßÆ –°–≤–µ—Ä–∫–∞ —Å ¬´–ò—Ç–æ–≥–æ¬ª –∏–∑ —Ñ–∞–π–ª–æ–≤"); st.caption("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ '–ò—Ç–æ–≥–æ' –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö.")
    if df_all.empty or not months_range: st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–µ—Ä–∫–∏."); return
    st.info("""
        üí° **–í–∞–∂–Ω–æ: –ø–æ—á–µ–º—É ¬´–ò—Ç–æ–≥–æ¬ª –ø–æ —Å—Å—É–¥–Ω–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç**

        –í –Ω–∞—à–µ–º —Ä–∞—Å—á–µ—Ç–µ ¬´–ò—Ç–æ–≥–æ¬ª ‚Äî —ç—Ç–æ **—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥**. –í —Ñ–∞–π–ª–µ Excel ‚Äî —ç—Ç–æ **—Å—É–º–º–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞ –≤—Å–µ –º–µ—Å—è—Ü—ã**.
        –°—É–º–º–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ—ç—Ç–æ–º—É —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è —ç—Ç–∏—Ö –º–µ—Ç—Ä–∏–∫ —è–≤–ª—è–µ—Ç—Å—è –æ–∂–∏–¥–∞–µ–º—ã–º –∏ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π.
    """)
    ours = monthly_totals_table(df_all, regions, months_range, all_available_months)
    if ours.empty: st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–≤–µ—Ä–∫–∏."); return
    tot_row, tot_col = provided_totals_from_files(df_all, regions, months_range)
    colcfg = {c: st.column_config.NumberColumn(c, format="%.0f") for c in ours.columns if c != "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"}
    colcfg["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"] = st.column_config.TextColumn("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å")
    st.markdown("**1) –ù–∞—à —Ä–∞—Å—á—ë—Ç (–º–µ—Å—è—Ü—ã + –ò—Ç–æ–≥–æ)**"); st.dataframe(ours, width="stretch", column_config=colcfg)
    if not tot_row.empty:
        st.markdown("**2) ¬´–ò—Ç–æ–≥–æ –ø–æ –≤—Å–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º¬ª –∏–∑ —Ñ–∞–π–ª–æ–≤ (—Å—Ç—Ä–æ–∫–∏ '–ò—Ç–æ–≥–æ'):**"); st.dataframe(tot_row, width="stretch", column_config=colcfg)
        left, right = ours.set_index("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"), tot_row.set_index("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å").reindex(ours["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"])
        common_cols = [c for c in left.columns if c in right.columns]
        diff = (left[common_cols] - right[common_cols]).reset_index()
        st.markdown("**Œî –†–∞–∑–Ω–∏—Ü–∞ (–Ω–∞—à —Ä–∞—Å—á—ë—Ç ‚àí ¬´–ò—Ç–æ–≥–æ¬ª —Å—Ç—Ä–æ–∫–∏):**"); st.dataframe(diff, width="stretch", column_config=colcfg)
    if not tot_col.empty:
        st.markdown("**3) –°–≤–µ—Ä–∫–∞ —Å–æ —Å—Ç–æ–ª–±—Ü–æ–º ¬´–ò—Ç–æ–≥–æ¬ª –≤ —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π:**")
        left = ours[["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å","–ò—Ç–æ–≥–æ"]].set_index("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å")
        right = tot_col.set_index("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å").reindex(left.index)
        diff2 = (left["–ò—Ç–æ–≥–æ"] - right["–ò—Ç–æ–≥–æ"]).reset_index()
        st.dataframe(diff2, width="stretch", column_config={"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": st.column_config.TextColumn("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"), "–ò—Ç–æ–≥–æ": st.column_config.NumberColumn("Œî –ø–æ ¬´–ò—Ç–æ–≥–æ¬ª", format="%.0f")})
    if tot_row.empty and tot_col.empty: st.info("–í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö ¬´–ò—Ç–æ–≥–æ¬ª –¥–ª—è —Å–≤–µ—Ä–∫–∏.")

def month_check_block(df_all: pd.DataFrame, regions: list[str], months_range: list[str], all_available_months: list[str]):
    st.subheader("üìÖ –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –º–µ—Å—è—Ü–∞–º")
    st.caption("–ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–µ–≥–∏–æ–Ω–∞–º, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ.")
    if df_all.empty or not months_range: st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."); return
    table = monthly_totals_table(df_all, regions, months_range, all_available_months)
    if table.empty: st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã."); return
    colcfg = {c: st.column_config.NumberColumn(c, format="%.0f") for c in table.columns if c != "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"}
    colcfg["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"] = st.column_config.TextColumn("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å")
    st.dataframe(table, width="stretch", column_config=colcfg)

def export_block(df_long: pd.DataFrame):
    st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"); st.caption("–î–ª–∏–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –†–µ–≥–∏–æ–Ω ¬∑ –ì–æ–¥ ¬∑ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ ¬∑ –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å ¬∑ –ú–µ—Å—è—Ü ¬∑ –ó–Ω–∞—á–µ–Ω–∏–µ.")
    csv_bytes = df_long.to_csv(index=False).encode("utf-8-sig")
    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç (CSV)", data=csv_bytes, file_name="NUZ_combined_Long.csv", mime="text/csv")

def info_block():
    st.header("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ")
    st.markdown("""
### –ö–ª—é—á —Ä–∞—Å—á—ë—Ç–∞
- **–í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±–µ—Ä—É—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞.**
- **–°—É–º–º—ã (—Ä—É–±, —à—Ç):** –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ **—Å—É–º–º–∞** –º–µ—Å—è—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥.
- **–ü—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –¥–æ–ª–∏ (%):** –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ **–ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–µ–¥–Ω–µ–µ** –º–µ—Å—è—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥.
- **–°—Å—É–¥–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å:** –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ **–ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ** –∑–∞ –ø–µ—Ä–∏–æ–¥ (—Å–Ω–∏–º–æ–∫ –Ω–∞ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞).
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–º–±–∞—Ä–¥–æ–≤:** –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ **–ø–æ—Å–ª–µ–¥–Ω–µ–µ** –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ (—Å–Ω–∏–º–æ–∫ –Ω–∞ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞).

### –°–æ–≤–µ—Ç—ã –ø–æ –∞–Ω–∞–ª–∏–∑—É
- **–ï—Å–ª–∏ –¥–æ–ª—è –ø—Ä–æ–¥–∞–∂ –Ω–∏–∂–µ –∑–∞–π–º–∞ —Ä–∞—Å—Ç–µ—Ç**, –æ–∂–∏–¥–∞–π—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –Ω–µ–ª–∏–∫–≤–∏–¥–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –æ—Ü–µ–Ω–∫–∏ –∑–∞–ª–æ–≥–æ–≤ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è—Ö —Å –≤—ã—Å–æ–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —ç—Ç–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è.
- **–í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è) –Ω–µ –≤—Å–µ–≥–¥–∞ —Ö–æ—Ä–æ—à–æ**, –µ—Å–ª–∏ –ø—Ä–∏ —ç—Ç–æ–º –º–Ω–æ–≥–æ –∑–∞–ª–æ–≥–æ–≤ —É—Ö–æ–¥–∏—Ç –≤ –ø—Ä–æ–¥–∞–∂—É. –ò—â–∏—Ç–µ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º –∑–∞–ª–æ–≥–æ–≤: –∏–¥–µ–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ ‚Äì —É–º–µ—Ä–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –¥–æ–ª–µ —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂.
- **–°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∑–∞–π–º–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞ –∏–∑–¥–µ–ª–∏–π**. –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Å—Ä–µ–¥–Ω–∏–µ —Å—É–º–º—ã –º–æ–≥—É—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —Ñ–∏–ª–∏–∞–ª –≤—ã–¥–∞–µ—Ç –∑–∞–π–º—ã –ø–æ–¥ –¥–æ—Ä–æ–≥–∏–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç–∞–º —Å–ª–æ–∂–Ω–µ–µ –≤—ã–∫—É–ø–∏—Ç—å, —á—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∏—Å–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂—É.
""")

def main():
    st.markdown(f"# üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥: –ù–Æ–ó  \n<span class='badge'>–í–µ—Ä—Å–∏—è {APP_VERSION}</span>", unsafe_allow_html=True)
    st.sidebar.header("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    region_prefix = st.sidebar.text_input("–ü—Ä–µ—Ñ–∏–∫—Å —Ä–µ–≥–∏–æ–Ω–∞", value="", help="–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞.")
    uploads = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã Excel", type=["xlsx","xls"], accept_multiple_files=True)
    if not uploads: st.info("‚¨ÖÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ Excel –¥–ª—è —Å—Ç–∞—Ä—Ç–∞."); st.stop()
    # strict_mode —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–µ–Ω –∫–∞–∫ –æ–ø—Ü–∏—è, –æ–Ω –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Ñ–ª–∞–≥–æ–º SIMPLE_MODE
    strict_mode = SIMPLE_MODE

    dfs, errors = [], []
    with st.spinner("–ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
        for up in uploads:
            try:
                stem = Path(up.name).stem
                region_name = f"{region_prefix.strip()}: {stem}" if region_prefix.strip() else stem
                year_guess = guess_year_from_filename(up.name)

                key_year = f"year_for_{up.name}"
                if year_guess is None:
                    st.sidebar.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ–¥ –∏–∑ –∏–º–µ–Ω–∏: {up.name}")
                    st.sidebar.caption("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—Ä—É—á–Ω—É—é.")
                    year_guess = st.sidebar.selectbox(
                        f"–ì–æ–¥ –¥–ª—è —Ñ–∞–π–ª–∞: {up.name}",
                        options=[2023, 2024, 2025, 2026],
                        index=1,
                        key=key_year
                    )
                dfs.append(parse_excel(up.getvalue(), region_name, file_year=year_guess))
            except Exception as e:
                errors.append(f"**{up.name}**: {e}")

    if errors: st.error("–û—à–∏–±–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:\n\n" + "\n\n".join(errors))
    if not dfs: st.stop()
    df_all = pd.concat(dfs, ignore_index=True)

    # –¥–æ–ø. –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è "–†–µ–≥–∏–æ–Ω"
    df_all["–†–µ–≥–∏–æ–Ω"] = (df_all["–†–µ–≥–∏–æ–Ω"]
        .str.replace(r"\s{2,}", " ", regex=True)
        .str.replace(r"[¬∑.]+$", "", regex=True)
        .str.strip()
        .astype("string")
    )

    df_all["–ó–Ω–∞—á–µ–Ω–∏–µ"] = pd.to_numeric(df_all["–ó–Ω–∞—á–µ–Ω–∏–µ"], errors="coerce")
    df_all["–ì–æ–¥"] = pd.to_numeric(df_all["–ì–æ–¥"], errors="coerce").astype("Int64")
    for c in ["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ö–æ–¥", "–ú–µ—Å—è—Ü", "–ò—Å—Ç–æ—á–Ω–∏–∫–§–∞–π–ª–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]:
        if c == "–ú–µ—Å—è—Ü":
            df_all[c] = df_all[c].astype(pd.CategoricalDtype(categories=ORDER_WITH_TOTAL, ordered=True))
        else:
            df_all[c] = df_all[c].astype("string")

    years_all = sorted([int(y) for y in pd.Series(df_all["–ì–æ–¥"].dropna().unique()).astype(int)])
    if not years_all:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ–¥ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—Ä—É—á–Ω—É—é.")
        st.stop()

    mask_pct = df_all["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].apply(is_percent_metric)
    df_all.loc[mask_pct, "–ó–Ω–∞—á–µ–Ω–∏–µ"] = normalize_percent_series(df_all.loc[mask_pct, "–ó–Ω–∞—á–µ–Ω–∏–µ"])

    only_nuz = st.sidebar.toggle("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ù–Æ–ó", value=True)
    if only_nuz and "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" in df_all.columns:
        df_nuz = df_all[df_all["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].fillna("–û–±—â–µ–µ") == "–ù–Æ–ó"]
        if df_nuz.empty:
            st.sidebar.warning("–í —Ñ–∞–π–ª–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –º–µ—Ç–∫–æ–π ¬´–ù–Æ–ó¬ª. –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        else:
            df_all = df_nuz

    st.sidebar.markdown("### –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞")
    mode_year = st.sidebar.radio("", options=["–û–¥–∏–Ω –≥–æ–¥", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ–¥–æ–≤"], index=0, horizontal=True)

    if mode_year == "–û–¥–∏–Ω –≥–æ–¥":
        year_selected = st.sidebar.selectbox("–ì–æ–¥", options=years_all, index=len(years_all)-1)
        df_scope = df_all[df_all["–ì–æ–¥"] == year_selected].copy()
        months_in_data = sorted_months_safe(df_scope["–ú–µ—Å—è—Ü"])
    else: # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–æ–¥–æ–≤
        c_y1, c_y2 = st.sidebar.columns(2)
        year_a = c_y1.selectbox("–ì–æ–¥ A (–±–∞–∑–∞)", options=years_all, index=max(0, len(years_all)-2), key="year_a")
        year_b = c_y2.selectbox("–ì–æ–¥ B (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)", options=years_all, index=len(years_all)-1, key="year_b")
        df_a = df_all[df_all["–ì–æ–¥"] == year_a].copy()
        df_b = df_all[df_all["–ì–æ–¥"] == year_b].copy()
        months_a = sorted_months_safe(df_a["–ú–µ—Å—è—Ü"])
        months_b = sorted_months_safe(df_b["–ú–µ—Å—è—Ü"])
        months_in_data = [m for m in ORDER if m in months_a and m in months_b]

    if not months_in_data:
        st.error("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ (–∏–ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–æ–≤) –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞–º–∏."); st.stop()

    st.sidebar.markdown("**–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞**")
    if "global_period" not in st.session_state:
        st.session_state["global_period"] = (months_in_data[0], months_in_data[-1])

    preset = st.sidebar.radio("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä", options=["–í–µ—Å—å –ø–µ—Ä–∏–æ–¥","–ö–≤–∞—Ä—Ç–∞–ª","2 –º–µ—Å.","–¢–µ–∫—É—â–∏–π –º–µ—Å."], index=0, horizontal=True)
    if preset == "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥": st.session_state["global_period"] = (months_in_data[0], months_in_data[-1])
    elif preset == "–ö–≤–∞—Ä—Ç–∞–ª":
        rng = months_in_data[-3:] if len(months_in_data) >= 3 else months_in_data
        st.session_state["global_period"] = (rng[0], rng[-1])
    elif preset == "2 –º–µ—Å.":
        rng = months_in_data[-2:] if len(months_in_data) >= 2 else months_in_data
        st.session_state["global_period"] = (rng[0], rng[-1])
    else:
        last1 = months_in_data[-1]
        st.session_state["global_period"] = (last1, last1)

    start_default, end_default = st.session_state.get("global_period", (months_in_data[0], months_in_data[-1]))
    if start_default not in months_in_data or end_default not in months_in_data:
        start_default, end_default = months_in_data[0], months_in_data[-1]

    start_m, end_m = st.sidebar.select_slider("–ü–µ—Ä–∏–æ–¥", options=months_in_data, value=(start_default, end_default), key="period_slider")
    months_range = ORDER[ORDER.index(start_m): ORDER.index(end_m) + 1]

    if st.sidebar.button("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
        st.session_state.clear(); st.rerun()

    if st.sidebar.button("‚ùå –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (—Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∞–π–ª—ã)"):
        st.cache_data.clear(); st.session_state.clear(); st.rerun()

    if mode_year == "–û–¥–∏–Ω –≥–æ–¥":
        regions_all = sorted(map(str, df_scope["–†–µ–≥–∏–æ–Ω"].unique()))
        regions = st.sidebar.multiselect("–†–µ–≥–∏–æ–Ω—ã", options=regions_all, default=regions_all)
        if not regions:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            st.stop()
            
        st.markdown(f"**–ê–Ω–∞–ª–∏–∑ –∑–∞ {year_selected} –≥–æ–¥.** –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: {len(regions)} –∏–∑ {len(regions_all)} —Ä–µ–≥–∏–æ–Ω–æ–≤; –ü–µ—Ä–∏–æ–¥: **{months_range[0]}** ‚Äì **{months_range[-1]}**")
        st.divider()

        agg_data_global = get_aggregated_data(df_scope, tuple(regions), tuple(months_range))
        monthly_data_global = get_monthly_pivoted_data(df_scope, tuple(regions), tuple(months_range), raw_only=True)

        with st.expander("üîç –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
            c1, c2, c3, c4 = st.columns(4)
            c1.metric("–§–∞–π–ª–æ–≤", len(uploads)); c2.metric("–†–µ–≥–∏–æ–Ω–æ–≤", len(regions_all))
            c3.metric("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π", strip_totals_rows(df_scope)["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].nunique())
            c4.metric("–ü–µ—Ä–∏–æ–¥ –≤ –¥–∞–Ω–Ω—ã—Ö", f"{months_in_data[0]} ‚Äì {months_in_data[-1]}")

        tab_list = ["üìä KPI","üìã –°–≤–æ–¥–∫–∞","üèÜ –õ–∏–¥–µ—Ä—ã","‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ","üìà –î–∏–Ω–∞–º–∏–∫–∞","üó∫Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞","üî¨ –í–∑–∞–∏–º–æ—Å–≤—è–∑–∏","üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏","üì• –≠–∫—Å–ø–æ—Ä—Ç","‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"]
        tabs = st.tabs(tab_list)
        color_map = consistent_color_map(tuple(regions_all))

        with tabs[0]: kpi_block(df_scope, regions, months_range, months_in_data, strict_mode)
        with tabs[1]: summary_block(agg_data_global, df_scope, regions, months_range, months_in_data, strict_mode)
        with tabs[2]: leaderboard_block(df_scope, regions, months_in_data)
        with tabs[3]: comparison_block(df_scope, regions, months_in_data)
        with tabs[4]: dynamics_block(df_scope, regions, months_range, color_map)
        with tabs[5]: treemap_heatmap_block(df_scope, regions, months_range, color_map)
        with tabs[6]: scatter_plot_block(df_scope, monthly_data_global, color_map)
        with tabs[7]: correlations_block(df_scope, monthly_data_global)
        with tabs[8]: export_block(df_scope[df_scope["–†–µ–≥–∏–æ–Ω"].isin(regions) & df_scope["–ú–µ—Å—è—Ü"].isin(months_range)])
        with tabs[9]: info_block()

    else: # –†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–æ–¥–æ–≤
        regions_all = sorted(map(str, pd.concat([df_a, df_b])["–†–µ–≥–∏–æ–Ω"].unique()))
        regions = st.sidebar.multiselect("–†–µ–≥–∏–æ–Ω—ã", options=regions_all, default=regions_all)
        if not regions:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            st.stop()

        st.markdown(f"**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ {year_b} vs {year_a}.** –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: {len(regions)} –∏–∑ {len(regions_all)} —Ä–µ–≥–∏–æ–Ω–æ–≤; –ü–µ—Ä–∏–æ–¥: **{months_range[0]}** ‚Äì **{months_range[-1]}**")
        st.divider()

        monthly_a = get_monthly_pivoted_data(df_a, tuple(regions), tuple(months_range), raw_only=True)
        monthly_b = get_monthly_pivoted_data(df_b, tuple(regions), tuple(months_range), raw_only=True)
        monthly_ab = pd.concat([monthly_a.assign(–ì–æ–¥=year_a), monthly_b.assign(–ì–æ–¥=year_b)], ignore_index=True)
        color_map = consistent_color_map(tuple(regions_all))

        tab_list = ["üìä –ò—Ç–æ–≥–∏", "üìà –î–∏–Ω–∞–º–∏–∫–∞", "üî¨ –í–∑–∞–∏–º–æ—Å–≤—è–∑–∏", "üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", "üì• –≠–∫—Å–ø–æ—Ä—Ç", "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"]
        tabs = st.tabs(tab_list)

        with tabs[0]:
            yoy_summary_block(df_a, df_b, regions, months_range, years=(year_a, year_b))
        with tabs[1]:
            dynamics_compare_block(df_a, df_b, regions, months_range, color_map, year_a, year_b)
        with tabs[2]:
            scatter_plot_block_years(df_all, monthly_ab, color_map, year_a, year_b)
        with tabs[3]:
            correlations_block(df_all, monthly_ab)
        with tabs[4]:
            export_block(pd.concat([df_a, df_b], ignore_index=True))
        with tabs[5]:
            info_block()


if __name__ == "__main__":
    main()